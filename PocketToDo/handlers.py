import sqlite3
import logging
import re
from database import DB_PATH
from typing import List, Tuple, Optional
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from database import (
    get_tasks_db, toggle_task_status_db, add_task_db, delete_task_db,
    delete_completed_tasks_for_user, get_tasks_with_reminders, set_reminder,
    update_task_priority, toggle_task_db
)
from keyboards import get_main_keyboard, get_task_list_markup, get_cancel_keyboard, priority_emoji
from utils import extract_categories

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADDING_TASK = 1
DELETING_TASKS = 2
SETTING_CUSTOM_REMINDER = 3

# –ï–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
MENU_BUTTONS = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    await update.message.reply_text(
        "üò∫ –ü—Ä–∏–≤–µ—Ç, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫! –Ø ‚Äì —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–¥–∞—á!\n\n"
        "üìù –Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Ç–≤–æ—ë \"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ\" –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞–ª–æ—Å—å –≤ —Å–≤–∞–ª–∫—É —Å–ø–∏—Å–∫–æ–≤ –¥–µ–ª, –∞ –∂–∏–∑–Ω—å —Å—Ç–∞–ª–∞ –ø—Ä–æ—â–µ! \n\n"
        "‚ú® –ß—Ç–æ —è —É–º–µ—é:\n"
        "- –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å!)\n"
        "- –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (–ø—Ä–∏—è—Ç–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ, –∫–æ–≥–¥–∞ –≤—ã—á—ë—Ä–∫–∏–≤–∞–µ—à—å –¥–µ–ª–∞ ‚úÖ)\n"
        "- –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–µ (—á–∏—Å—Ç–æ—Ç–∞ ‚Äì –∑–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! üòä)\n\n"
        "üöÄ –ù–∞—á–Ω—ë–º –≤–º–µ—Å—Ç–µ –¥–µ–ª–∞—Ç—å —Ç–≤–æ–∏ –¥–µ–ª–∞? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∑–∞–¥–∞—á—É!",
        reply_markup=get_main_keyboard()
    )
 # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –≥–∞–π–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ
    if not context.user_data.get('hint_start_shown'):
        await update.message.reply_text(
            "‚ÑπÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ‚úã\n\n"
            "–í–æ—Ç –∫–∞–∫ –ª–µ–≥–∫–æ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n"
            "‚ú® –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –∑–∞–¥–∞—á—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ö—É–ø–∏—Ç—å –∫–æ–ª–±–∞—Å–∫–∏ \n\n"
            "‚ú® –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á? –ü–∏—à–∏ –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
            "–ü–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∞\n–ö—É–ø–∏—Ç—å —Ö–ª–µ–±\n–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n\n"
            "‚ú® –í–∞–∂–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å? –ü–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —É–∫–∞–∑–∞–≤ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞—á–µ:\n"
            "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –±—Ä–∞—Ç–∏—à–∫–µ 18:00\n–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É '–¥–∞—Ç–∞' 10:00\n\n"
            "‚ú® –•–æ—á–µ—à—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º? –ò—Å–ø–æ–ª—å–∑—É–π #—Ç–µ–≥–∏:\n"
            "–°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç #—Ä–∞–±–æ—Ç–∞\n–ó–∞–±—Ä–∞—Ç—å –ø–ª–µ–º—è–Ω–Ω–∏–∫–∞ –∏–∑ —à–∫–æ–ª—ã #—Å–µ–º—å—è\n\n"
            "‚ú® –ù—É–∂–Ω–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∂–Ω–æ–º? –î–æ–±–∞–≤—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å –ø–æ–º–æ—â—å—é !:\n"
            "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä !–≤–∞–∂–Ω–æ\n–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç !–Ω–∏–∑–∫–∏–π\n\n"
            "‚ú® –í—Å—ë –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n"
            "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å –∫–æ–º–∞–Ω–¥–æ–π #—Ä–∞–±–æ—Ç–∞ !—Å—Ä–æ—á–Ω–æ 13:35\n\n"
            "‚ùì –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –∑–∞–±—ã–ª - –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–µ—Ä–∏ /help –∏–ª–∏ –≤—ã–±–µ—Ä–∏ /help –≤ –º–µ–Ω—é!\n\n"
            "–í–ø–µ—Ä–µ–¥ üöÄ",
            reply_markup=get_main_keyboard()
        )
        context.user_data['hint_start_shown'] = True
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    await update.message.reply_text(
        "‚ÑπÔ∏è –í–æ—Ç –∫–∞–∫ –ª–µ–≥–∫–æ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n"
            "‚ú® –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –∑–∞–¥–∞—á—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ö—É–ø–∏—Ç—å –∫–æ–ª–±–∞—Å–∫–∏ \n\n"
            "‚ú® –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á? –ü–∏—à–∏ –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
            "–ü–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∞\n–ö—É–ø–∏—Ç—å —Ö–ª–µ–±\n–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n\n"
            "‚ú® –í–∞–∂–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å? –ü–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —É–∫–∞–∑–∞–≤ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞—á–µ:\n"
            "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –±—Ä–∞—Ç–∏—à–∫–µ 18:00\n–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É '–¥–∞—Ç–∞' 10:00\n\n"
            "‚ú® –•–æ—á–µ—à—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º? –ò—Å–ø–æ–ª—å–∑—É–π #—Ç–µ–≥–∏:\n"
            "–°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç #—Ä–∞–±–æ—Ç–∞\n–ó–∞–±—Ä–∞—Ç—å –ø–ª–µ–º—è–Ω–Ω–∏–∫–∞ –∏–∑ —à–∫–æ–ª—ã #—Å–µ–º—å—è\n\n"
            "‚ú® –ù—É–∂–Ω–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∂–Ω–æ–º? –î–æ–±–∞–≤—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å –ø–æ–º–æ—â—å—é !:\n"
            "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä !–≤–∞–∂–Ω–æ\n–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç !–Ω–∏–∑–∫–∏–π\n\n"
            "‚ú® –í—Å—ë –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n"
            "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å –∫–æ–º–∞–Ω–¥–æ–π #—Ä–∞–±–æ—Ç–∞ !—Å—Ä–æ—á–Ω–æ 13:35\n\n"
            "‚ùì –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –∑–∞–±—ã–ª - –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–µ—Ä–∏ /help –∏–ª–∏ –≤—ã–±–µ—Ä–∏ /help –≤ –º–µ–Ω—é!\n\n"
            "–£–¥–∞—á–∏! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è üòé"
    )

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_chat.type in ['group', 'supergroup']:
        entity_id = update.effective_chat.id
    else:
        entity_id = update.effective_user.id  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
    tasks = get_tasks_db(entity_id, only_open=False)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if hasattr(context, 'user_data'):
        context.user_data['active_task_list'] = True
        context.user_data['active_category_view'] = False
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_markup = get_task_list_markup(entity_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",
                reply_markup=keyboard_markup
            )
        else:
            await update.message.reply_text(
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",
                reply_markup=keyboard_markup
            )
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "Message is not modified"
        if "Message is not modified" in str(e):
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return
        
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",
                reply_markup=keyboard_markup
            )
        except Exception as e2:
            logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {e2}")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    await update.message.reply_text(
        "–í–≤–æ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–¥–∞—á–∞ 1\n–ó–∞–¥–∞—á–∞ 2\n –∏–ª–∏\n–ó–∞–¥–∞—á–∞ 1; –ó–∞–¥–∞—á–∞ 2)",
        reply_markup=get_cancel_keyboard()
    )
    return ADDING_TASK

async def save_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º owner_id –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ª–∏—á–∫–∏
    if update.effective_chat.type in ['group', 'supergroup']:
        owner_id = update.effective_chat.id
    else:
        owner_id = update.effective_user.id

    input_text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if input_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∫ –∑–∞–¥–∞—á–∏
    MENU_BUTTONS = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]

    if not input_text:
        await update.message.reply_text("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if input_text in MENU_BUTTONS:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await main_menu_handler(update, context)
        return ConversationHandler.END

    tasks_list = [task.strip() for task in re.split(r';|\n', input_text) if task.strip()]

    for task_text in tasks_list:
        add_task_db(owner_id, task_text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if hasattr(context, 'user_data') and context.user_data.get('active_category_view', False):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await show_tasks_by_category(update, context)
    else:
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        await list_tasks(update, context)

    return ConversationHandler.END

async def add_task_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if (hasattr(context, 'user_data') and 
        context.user_data.get('reminder_task_id')):
        return
    
    MENUBUTTONS = ["–ú–µ–Ω—é", "–°–ø–∏—Å–æ–∫", "–£–¥–∞–ª–∏—Ç—å"]
    text = update.message.text.strip()
    if not text or text.startswith("/") or text in MENUBUTTONS:
        return
    if text in MENUBUTTONS:
        return

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_username = (await context.bot.get_me()).username
    mention = f"@{bot_username}"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º owner_id –∏ task_text
    if update.effective_chat.type in ['group', 'supergroup']:
        if not text.startswith(mention):
            return  # –í –≥—Ä—É–ø–ø–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
        task_text = text[len(mention):].strip()
        if not task_text:
            return
        owner_id = update.effective_chat.id
    else:
        task_text = text
        owner_id = update.effective_user.id

    tasks_list = [task.strip() for task in re.split(r";|\n", task_text) if task.strip()]
    for task_text in tasks_list:
        add_task_db(owner_id, task_text)

    logger.info(f"owner_id={owner_id}, tasks={tasks_list}")

    if hasattr(context, "user_data") and context.user_data.get("active_category_view", False):
        await show_tasks_by_category(update, context)
    else:
        await list_tasks(update, context)

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        Optional[int]: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ None
    """
    try:
        text = update.message.text
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
            return await add(update, context)
        elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ú–æ–∏ –∑–∞–¥–∞—á–∏' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
            await list_tasks(update, context)
            return ConversationHandler.END
        elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
            return await ask_delete_tasks(update, context)
        elif text == "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
            if update.effective_chat.type in ['group', 'supergroup']:
                owner_id = update.effective_chat.id
            else:
                owner_id = update.effective_user.id
            delete_completed_tasks_for_user(owner_id)

            await update.message.reply_text("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã", reply_markup=get_main_keyboard())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if hasattr(context, 'user_data') and context.user_data.get('active_category_view', False):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                await show_tasks_by_category(update, context)
            else:
                # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                await list_tasks(update, context)
            
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return ConversationHandler.END

async def ask_delete_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5-7):",
        reply_markup=get_cancel_keyboard()
    )
    return DELETING_TASKS

async def delete_tasks_by_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä–∞–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º owner_id –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ª–∏—á–∫–∏
    if update.effective_chat.type in ['group', 'supergroup']:
        owner_id = update.effective_chat.id
    else:
        owner_id = update.effective_user.id

    input_text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if input_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á
    MENU_BUTTONS = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]

    if input_text in MENU_BUTTONS:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await main_menu_handler(update, context)
        return ConversationHandler.END

    input_text = input_text.replace(' ', '')
    tasks = get_tasks_db(owner_id, only_open=False)
    to_delete = set()

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
    for part in input_text.split(','):
        if '-' in part:
            start_end = part.split('-')
            if len(start_end) == 2 and start_end[0].isdigit() and start_end[1].isdigit():
                start, end = map(int, start_end)
                for n in range(start, end + 1):
                    if 1 <= n <= len(tasks):
                        to_delete.add(tasks[n-1][0])
        elif part.isdigit():
            n = int(part)
            if 1 <= n <= len(tasks):
                to_delete.add(tasks[n-1][0])

    if not to_delete:
        await update.message.reply_text(
            "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    deleted_count = 0
    for task_id in to_delete:
        try:
            delete_task_db(task_id, owner_id)
            deleted_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")

    if deleted_count > 0:
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–¥–∞—á.", reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏.", reply_markup=get_main_keyboard())

    await list_tasks(update, context)
    return ConversationHandler.END

async def task_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    data = query.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º owner_id –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ª–∏—á–∫–∏
    if update.effective_chat.type in ['group', 'supergroup']:
        owner_id = update.effective_chat.id
    else:
        owner_id = query.from_user.id

    if data == "divider":
        await query.answer()
        return

    if data == "toggle_all":
        tasks = get_tasks_db(owner_id, only_open=False)
        if not tasks:
            await query.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return

        has_incomplete = any(not task[2] for task in tasks)
        new_status = 1 if has_incomplete else 0

        for task_id, _, _, _, _ in tasks:
            toggle_task_status_db(task_id, new_status)

        await query.answer("–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑–º–µ–Ω—ë–Ω")
        await list_tasks(update, context)
        return

    if data == "priority_mode":
        await show_priority_menu(update, context)
        return

    if data == "category_mode":
        await show_categories_menu(update, context)
        return

    if data == "reminder_mode":
        await show_reminders_menu(update, context)
        return

    if data.startswith("reminder_options_"):
        await show_reminder_options(update, context)
        return

    if data.startswith("delete_reminder_"):
        await delete_reminder(update, context)
        return

    if data.startswith("snooze_reminder_"):
        await snooze_reminder(update, context)
        return

    if data.startswith("filter_category_"):
        await show_tasks_by_category(update, context)
        return

    if data.startswith("set_priority_"):
        await show_priority_options(update, context)
        return

    if data.startswith("priority_"):
        await set_task_priority(update, context)
        return

    if data.startswith('category_priority_mode_'):
        await show_category_priority(update, context)
        return

    if data.startswith('category_reminder_mode_'):
        await show_category_reminder(update, context)
        return

    if data.startswith('toggle_all_category_'):
        await toggle_all_category_tasks(update, context)
        return

    if data == "back_to_list":
        if hasattr(context, "user_data") and context.user_data.get("active_category_view", False):
            # –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            context.user_data["active_category_view"] = False
            await show_categories_menu(update, context)
        else:
            # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
            await list_tasks(update, context)
        return

    if data.startswith("toggle"):
        task_id = int(data.split("_")[1])
        success = toggle_task_db(task_id, owner_id)
        if success:
            await query.answer("‚úÖ")
        else:
            await query.answer("‚ùå")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if hasattr(context, 'user_data') and context.user_data.get("active_category_view", False):
            # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await show_tasks_by_category(update, context)
        else:
            # –ï—Å–ª–∏ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                keyboard_markup = get_task_list_markup(owner_id)
                await query.edit_message_reply_markup(reply_markup=keyboard_markup)
            except Exception as e:
                if "Message is not modified" not in str(e):
                    logger.error(f"Error updating keyboard: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
                await list_tasks(update, context)
        return


async def show_priority_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    
    if update.effective_chat.type in ['group', 'supergroup']:
        owner_id = update.effective_chat.id
    else:
        owner_id = query.from_user.id
    
    tasks = get_tasks_db(owner_id, only_open=False)
    
    keyboard = []
    
    priority_emoji = {3: "üî¥", 2: "üü°", 1: "üîµ"}
    
    for i, (task_id, text, done, priority, reminder_time) in enumerate(tasks, 1):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        status = "‚úÖ" if done else "‚òê"
        if priority > 0:
            priority_icon = priority_emoji.get(priority, "")
            task_text = f"{status} {priority_icon} {text}"
        else:
            task_text = f"{status} {priority_icon} {text}" if priority > 0 else f"{status} {text}"
            
        keyboard.append([InlineKeyboardButton(
            text=task_text, 
            callback_data=f"set_priority_{task_id}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_list")])
    
    await query.edit_message_text(
        text="üî¢ *–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_priority_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º task_id –∏–∑ callback_data
    task_id = int(query.data.split("_")[2])  # set_priority_123 -> 123
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    back_callback = "priority_mode"
    current_category = ""
    if hasattr(context, 'user_data') and context.user_data.get('active_category_view', False):
        current_category = context.user_data.get('current_category', "")
        back_callback = f"category_priority_mode_{current_category}"
    
    keyboard = [
        [InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–∏–π", callback_data=f"priority_{task_id}_3")],
        [InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data=f"priority_{task_id}_2")],
        [InlineKeyboardButton(text="üîµ –ù–∏–∑–∫–∏–π", callback_data=f"priority_{task_id}_1")],
        [InlineKeyboardButton(text="–ë–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞", callback_data=f"priority_{task_id}_0")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)]
    ]
    
    await query.edit_message_text(
        text="üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def set_task_priority(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    parts = query.data.split("_")
    task_id = int(parts[1])
    priority = int(parts[2])
    update_task_priority(task_id, priority)
    
    if hasattr(context, 'user_data') and context.user_data.get('active_category_view', False):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        current_category = context.user_data.get('current_category', '')
        # –ò–º–∏—Ç–∏—Ä—É–µ–º callback_data –¥–ª—è show_category_priority
        original_data = query.data
        query.data = f'category_priority_mode_{current_category}'
        await show_category_priority(update, context)
        query.data = original_data
    else:
        await show_priority_menu(update, context)

async def show_categories_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á
    """
    query = update.callback_query
    await query.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –æ–±—â–∏–π —Ä–µ–∂–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    context.user_data['active_category_view'] = False
    context.user_data['current_category'] = ''

    if update.effective_chat.type in ['group', 'supergroup']:
        owner_id = update.effective_chat.id
    else:
        owner_id = query.from_user.id
    tasks = get_tasks_db(owner_id, only_open=False)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∑–∞–¥–∞—á
    categories = {}
    for task_id, text, done, priority, reminder_time in tasks:
        task_categories = extract_categories(text)
        for category in task_categories:
            if category in categories:
                categories[category] += 1
            else:
                categories[category] = 1

    keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if not categories:
        keyboard.append([
            InlineKeyboardButton(
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                callback_data="divider"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤—å—Ç–µ #–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –∑–∞–¥–∞—á–µ",
                callback_data="divider"
            )
        ])
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á
        sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)
        
        for category, count in sorted_categories:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"#{category} ({count})",
                    callback_data=f"filter_category_{category}"
                )
            ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_list"
        )
    ])
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    await query.edit_message_text(
        text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_tasks_by_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    if update.effective_chat.type in ['group', 'supergroup']:
        owner_id = update.effective_chat.id
    else:
        owner_id = update.effective_user.id if not query else query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data –∏–ª–∏ –∏–∑ context
    if query and hasattr(query, 'data') and query.data.startswith('filter_category_'):
        category = query.data.split('_', 2)[2]
        await query.answer()
    elif hasattr(context, 'user_data') and 'current_view' in context.user_data and context.user_data['current_view']['type'] == 'category':
        category = context.user_data['current_view']['category']
    else:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = get_tasks_db(owner_id, only_open=False)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from utils import extract_categories
    filtered_tasks = []
    for task in tasks:
        task_id, text, done, priority, reminder_time = task
        task_categories = extract_categories(text)
        if category in task_categories:
            filtered_tasks.append(task)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    done_count = sum(1 for task in filtered_tasks if task[2])  # task[2] —ç—Ç–æ done
    total_count = len(filtered_tasks)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    keyboard.append([
        InlineKeyboardButton(text=f"üîÑ [ {done_count}/{total_count} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ]", callback_data=f"toggle_all_category_{category}")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    keyboard.append([
        InlineKeyboardButton(text="üî¢ [ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ]", callback_data=f"category_priority_mode_{category}")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    keyboard.append([
        InlineKeyboardButton(text="üÜô [ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ]", callback_data=f"category_reminder_mode_{category}")
    ])
    
    keyboard.append([InlineKeyboardButton(text="‚îÄ" * 20, callback_data="divider")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not filtered_tasks:
        keyboard.append([InlineKeyboardButton(text="üìù –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–¥–∞—á", callback_data="divider")])
    else:
        for task_id, text, done, priority, reminder_time in filtered_tasks:
            status = "‚úÖ" if done else "‚òê"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            task_text = f"{status}"
            if priority > 0:
                priority_icon = f"{priority_emoji.get(priority, '')}"
                task_text = f"{status}{priority_icon}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if reminder_time:
                task_text = f"{task_text}üîî"
            task_text = f"{task_text} {text}"
            
            keyboard.append([InlineKeyboardButton(text=task_text, callback_data=f"toggle_{task_id}")])
    
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="category_mode")])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥ –≤ context
    context.user_data['active_category_view'] = True
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    context.user_data['active_category_view'] = True
    context.user_data['current_category'] = category  # ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–û!
    context.user_data['current_view'] = {'type': 'category', 'category': category}
    
    message_text = f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è #{category}:"
    
    if query:
        await query.edit_message_text(text=message_text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text=message_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_reminders_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –æ–±—â–∏–π —Ä–µ–∂–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    context.user_data['active_category_view'] = False
    context.user_data['current_category'] = ''

    if update.effective_chat.type in ['group', 'supergroup']:
        owner_id = update.effective_chat.id
    else:
        owner_id = update.effective_user.id if not query else query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = get_tasks_db(owner_id, only_open=False)
    
    tasks_with_reminders = []
    tasks_without_reminders = []
    
    for task in tasks:
        task_id, text, done, priority, reminder_time = task
        if reminder_time:
            tasks_with_reminders.append(task)
        else:
            tasks_without_reminders.append(task)
    
    keyboard = []
    keyboard.append([InlineKeyboardButton(text="‚îÄ" * 20, callback_data="divider")])
    
    if tasks_with_reminders:
        keyboard.append([InlineKeyboardButton(text="üîî –° –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:", callback_data="divider")])
        for task_id, text, done, priority, reminder_time in tasks_with_reminders:
            status = "‚úÖ" if done else "‚òê"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ü–û–°–õ–ï —Å—Ç–∞—Ç—É—Å–∞, –ø–æ—Ç–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            task_text = f"{status}"
            if priority > 0:
                priority_icon = f"{priority_emoji.get(priority, '')}"
                task_text = f"{status}{priority_icon}"
            
            task_text = f"{task_text}üîî {text}"
            
            keyboard.append([InlineKeyboardButton(
                text=task_text, 
                callback_data=f"reminder_options_{task_id}"
            )])
    
    if tasks_without_reminders:
        keyboard.append([InlineKeyboardButton(text="üìù –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", callback_data="divider")])
        for task_id, text, done, priority, reminder_time in tasks_without_reminders:
            status = "‚úÖ" if done else "‚òê"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ü–û–°–õ–ï —Å—Ç–∞—Ç—É—Å–∞
            task_text = f"{status}"
            if priority > 0:
                priority_icon = f"{priority_emoji.get(priority, '')}"
                task_text = f"{status}{priority_icon}"
            
            task_text = f"{task_text} {text}"
            
            keyboard.append([InlineKeyboardButton(
                text=task_text, 
                callback_data=f"reminder_options_{task_id}"
            )])
    
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_list")])
    
    total_with_reminders = len(tasks_with_reminders)
    total_without_reminders = len(tasks_without_reminders)
    
    await query.edit_message_text(
        text=f"üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:\n\n"
             f"–° –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {total_with_reminders}\n"
             f"–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total_without_reminders}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_reminder_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏"""
    query = update.callback_query
    await query.answer()
    
    task_id = int(query.data.split('_')[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    back_callback = "reminder_mode"
    current_category = ''  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—Ä–∞–Ω–µ–µ
    
    if hasattr(context, 'user_data') and context.user_data.get('active_category_view', False):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
        current_category = context.user_data.get('current_category', '')
        back_callback = f"category_reminder_mode_{current_category}"

    keyboard = [
        [InlineKeyboardButton(text="üîï –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=f"delete_reminder_{task_id}")],
        [InlineKeyboardButton(text="üîî 30 –º–∏–Ω—É—Ç", callback_data=f"snooze_reminder_{task_id}_30")],
        [InlineKeyboardButton(text="üîî 1 —á–∞—Å", callback_data=f"snooze_reminder_{task_id}_60")],
        [InlineKeyboardButton(text="üîî –ù–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è", callback_data=f"snooze_reminder_{task_id}_tomorrow")],
        [InlineKeyboardButton(text="üïê –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", callback_data=f"custom_reminder_{task_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)]
    ]
    
    await query.edit_message_text(
        text="üîî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def delete_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(query.data.split('_')[2])
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NULL)
    set_reminder(task_id, None)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if hasattr(context, 'user_data') and context.user_data.get('active_category_view', False):
        await show_category_reminder(update, context)  # ‚Üê –ü–†–ê–í–ò–õ–¨–ù–û!
    else:
        await show_reminders_menu(update, context)  # ‚Üê –ü–†–ê–í–ò–õ–¨–ù–û!

async def send_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
    """
    job = context.job
    task_id, owner_id, task_text = job.data
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç—Ä–µ–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ / –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏",
                callback_data=f"toggle_{task_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîî –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å",
                callback_data=f"snooze_reminder_{task_id}_60"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìÜ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è",
                callback_data=f"snooze_reminder_{task_id}_tomorrow"
            )
        ]
    ]
    
    await context.bot.send_message(
        chat_id=owner_id,
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task_text}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def snooze_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    task_id = int(parts[2])
    snooze_value = parts[3]

    # –í—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ (UTC+3)
    now = datetime.now(timezone.utc).astimezone(timezone(timedelta(hours=3)))

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ë–î
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT reminder_time FROM tasks WHERE id = ?", (task_id,))
    result = c.fetchone()
    conn.close()

    reminder_time = None
    if result and result[0]:
        try:
            reminder_time = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone(timedelta(hours=3)))
        except Exception:
            reminder_time = now  # fallback

    if snooze_value == "tomorrow":
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è, —á—Ç–æ –±—ã–ª–æ —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if reminder_time:
            new_reminder = reminder_time + timedelta(days=1)
        else:
            new_reminder = now + timedelta(days=1)
        new_reminder = new_reminder.replace(second=0)
    else:
        try:
            minutes = int(snooze_value)
            new_reminder = now + timedelta(minutes=minutes)
            new_reminder = new_reminder.replace(second=0)
        except Exception:
            new_reminder = now + timedelta(hours=1)
            new_reminder = new_reminder.replace(second=0)

    set_reminder(task_id, new_reminder)
    logger.info(f"new reminder set for task {task_id}: {new_reminder}")
    
    # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º reminder_task_id –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    if 'reminder_task_id' in context.user_data:
        del context.user_data['reminder_task_id']
    
    await update.message.reply_text(
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_reminder.strftime('%d.%m.%Y %H:%M')}",
        reply_markup=get_main_keyboard()
    )
    
    return ConversationHandler.END

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    task_text = get_task_text_by_id(task_id)
    if task_text:
        job_name = f"reminder_{task_id}"
        current_jobs = context.job_queue.get_jobs_by_name(job_name)
        for job in current_jobs:
            job.schedule_removal()

        context.job_queue.run_once(
            send_reminder,
            when=(new_reminder - now).total_seconds(),
            data=(task_id, query.from_user.id, task_text),
            name=job_name
        )

def get_task_text_by_id(task_id: int) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏
        
    Returns:
        –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT text FROM tasks WHERE id = ?", (task_id,))
    result = c.fetchone()
    conn.close()
    
    return result[0] if result else None

async def show_category_priority(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    category = '_'.join(query.data.split('_')[3:])  # category_priority_mode_–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    context.user_data['current_category'] = category
    context.user_data['active_category_view'] = True

    if update.effective_chat.type in ['group', 'supergroup']:
        owner_id = update.effective_chat.id
    else:
        owner_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    tasks = get_tasks_db(owner_id, only_open=False)
    from utils import extract_categories
    
    category_tasks = []
    for task in tasks:
        task_id, text, done, priority, reminder_time = task
        task_categories = extract_categories(text)
        if category in task_categories:
            category_tasks.append(task)
    
    keyboard = []
    keyboard.append([InlineKeyboardButton(text="‚îÄ" * 20, callback_data="divider")])
    
    # –£–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–¥—Ä—è–¥
    for task_id, text, done, priority, reminder_time in category_tasks:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        status = "‚úÖ" if done else "‚òê"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ü–û–°–õ–ï —Å—Ç–∞—Ç—É—Å–∞
        task_text = f"{status}"
        if priority > 0:
            priority_icon = f"{priority_emoji.get(priority, '')}"
            task_text = f"{status}{priority_icon}"
        
        task_text = f"{task_text} {text}"
        
        keyboard.append([InlineKeyboardButton(
            text=task_text, 
            callback_data=f"set_priority_{task_id}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"filter_category_{category}")])
    
    await query.edit_message_text(
        text=f"üî¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{category}:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_category_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    category = '_'.join(query.data.split('_')[3:])  # category_reminder_mode_–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    context.user_data['current_category'] = category
    context.user_data['active_category_view'] = True

    if update.effective_chat.type in ['group', 'supergroup']:
        owner_id = update.effective_chat.id
    else:
        owner_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    tasks = get_tasks_db(owner_id, only_open=False)
    from utils import extract_categories
    
    category_tasks_with_reminders = []
    category_tasks_without_reminders = []
    
    for task in tasks:
        task_id, text, done, priority, reminder_time = task
        task_categories = extract_categories(text)
        if category in task_categories:
            if reminder_time:
                category_tasks_with_reminders.append(task)
            else:
                category_tasks_without_reminders.append(task)
    
    keyboard = []
    keyboard.append([InlineKeyboardButton(text="‚îÄ" * 20, callback_data="divider")])
    
    if category_tasks_with_reminders:
        keyboard.append([InlineKeyboardButton(text="üîî –° –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:", callback_data="divider")])
        for task_id, text, done, priority, reminder_time in category_tasks_with_reminders:
            status = "‚úÖ" if done else "‚òê"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ü–û–°–õ–ï —Å—Ç–∞—Ç—É—Å–∞, –ø–æ—Ç–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            task_text = f"{status}"
            if priority > 0:
                priority_icon = f"{priority_emoji.get(priority, '')}"
                task_text = f"{status}{priority_icon}"
            
            task_text = f"{task_text}üîî {text}"
            
            keyboard.append([InlineKeyboardButton(
                text=task_text, 
                callback_data=f"reminder_options_{task_id}"
            )])
    
    if category_tasks_without_reminders:
        keyboard.append([InlineKeyboardButton(text="üìù –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", callback_data="divider")])
        for task_id, text, done, priority, reminder_time in category_tasks_without_reminders:
            status = "‚úÖ" if done else "‚òê"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ü–û–°–õ–ï —Å—Ç–∞—Ç—É—Å–∞
            task_text = f"{status}"
            if priority > 0:
                priority_icon = f"{priority_emoji.get(priority, '')}"
                task_text = f"{status}{priority_icon}"
            
            task_text = f"{task_text} {text}"
            
            keyboard.append([InlineKeyboardButton(
                text=task_text, 
                callback_data=f"reminder_options_{task_id}"
            )])
    
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"filter_category_{category}")])
    
    total_with_reminders = len(category_tasks_with_reminders)
    total_without_reminders = len(category_tasks_without_reminders)
    
    await query.edit_message_text(
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{category}:\n\n"
             f"–° –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {total_with_reminders}\n"
             f"–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total_without_reminders}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
async def toggle_all_category_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    category = '_'.join(query.data.split('_')[3:])  # toggle_all_category_–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    if update.effective_chat.type in ['group', 'supergroup']:
        owner_id = update.effective_chat.id
    else:
        owner_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    tasks = get_tasks_db(owner_id, only_open=False)
    from utils import extract_categories
    
    category_tasks = []
    for task in tasks:
        task_id, text, done, priority, reminder_time = task
        task_categories = extract_categories(text)
        if category in task_categories:
            category_tasks.append(task)
    
    if not category_tasks:
        await query.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–¥–∞—á")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ - –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ, –∏–Ω–∞—á–µ - —Å–Ω–∏–º–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö)
    has_incomplete = any(not task[2] for task in category_tasks)
    new_status = 1 if has_incomplete else 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for task_id, text, done, priority, reminder_time in category_tasks:
        toggle_task_status_db(task_id, new_status)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await show_tasks_by_category(update, context)

async def start_custom_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    task_id = int(query.data.split('_')[2])
    context.user_data['reminder_task_id'] = task_id
    
    await query.edit_message_text(
        text="üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
             "‚Ä¢ 15:30 - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30\n"
             "‚Ä¢ 29.05 10:00 - 29 –º–∞—è –≤ 10:00\n"
             "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 09:00 - –∑–∞–≤—Ç—Ä–∞ –≤ 09:00\n\n",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_list")]
        ])  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )
    
    return SETTING_CUSTOM_REMINDER

async def save_custom_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if update.effective_chat.type in ['group', 'supergroup']:
        owner_id = update.effective_chat.id
    else:
        owner_id = update.effective_user.id
    
    input_text = update.message.text.strip()
    
    if input_text == "/cancel":
        await update.message.reply_text(
            "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ utils –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
    from utils import extract_reminder_time
    reminder_time, _ = extract_reminder_time(input_text)
    
    if not reminder_time:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n"
            "‚Ä¢ 15:30 - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30\n"
            "‚Ä¢ 29.05 10:00 - 29 –º–∞—è –≤ 10:00\n"
            "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 09:00 - –∑–∞–≤—Ç—Ä–∞ –≤ 09:00"
        )
        return SETTING_CUSTOM_REMINDER
    
    task_id = context.user_data.get('reminder_task_id')
    if not task_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    set_reminder(task_id, reminder_time)
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime('%d.%m.%Y %H:%M')}",
        reply_markup=get_main_keyboard()
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
    if hasattr(context, 'user_data') and context.user_data.get('active_category_view', False):
        await show_tasks_by_category(update, context)
    else:
        await list_tasks(update, context)
    
    return ConversationHandler.END
