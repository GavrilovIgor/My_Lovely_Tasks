import sqlite3
import logging
import re
from database import DB_PATH
from typing import List, Tuple, Optional
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from database import (
    get_tasks_db, toggle_task_status_db, add_task_db, delete_task_db,
    delete_completed_tasks_for_user, get_tasks_with_reminders, set_reminder,
    update_task_priority, toggle_all_tasks_db
)
from keyboards import get_main_keyboard, get_task_list_markup, get_cancel_keyboard
from utils import extract_categories

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADDING_TASK = 1
DELETING_TASKS = 2

# –ï–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
MENU_BUTTONS = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    await update.message.reply_text(
        "üò∫ –ü—Ä–∏–≤–µ—Ç, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫! –Ø ‚Äì —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–¥–∞—á!\n\n"
        "üìù –Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Ç–≤–æ—ë \"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ\" –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞–ª–æ—Å—å –≤ —Å–≤–∞–ª–∫—É —Å–ø–∏—Å–∫–æ–≤ –¥–µ–ª, –∞ –∂–∏–∑–Ω—å —Å—Ç–∞–ª–∞ –ø—Ä–æ—â–µ! \n\n"
        "‚ú® –ß—Ç–æ —è —É–º–µ—é:\n"
        "- –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å!)\n"
        "- –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (–ø—Ä–∏—è—Ç–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ, –∫–æ–≥–¥–∞ –≤—ã—á—ë—Ä–∫–∏–≤–∞–µ—à—å –¥–µ–ª–∞ ‚úÖ)\n"
        "- –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–µ (—á–∏—Å—Ç–æ—Ç–∞ ‚Äì –∑–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! üòä)\n\n"
        "üöÄ –ù–∞—á–Ω—ë–º –≤–º–µ—Å—Ç–µ –¥–µ–ª–∞—Ç—å —Ç–≤–æ–∏ –¥–µ–ª–∞? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∑–∞–¥–∞—á—É!",
        reply_markup=get_main_keyboard()
    )
 # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –≥–∞–π–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ
    if not context.user_data.get('hint_start_shown'):
        await update.message.reply_text(
            "‚ÑπÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ‚úã\n\n"
            "–í–æ—Ç –∫–∞–∫ –ª–µ–≥–∫–æ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n"
            "‚ú® –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –∑–∞–¥–∞—á—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ö—É–ø–∏—Ç—å –∫–æ–ª–±–∞—Å–∫–∏ \n\n"
            "‚ú® –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á? –ü–∏—à–∏ –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
            "–ü–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∞\n–ö—É–ø–∏—Ç—å —Ö–ª–µ–±\n–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n\n"
            "‚ú® –í–∞–∂–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å? –ü–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —É–∫–∞–∑–∞–≤ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞—á–µ:\n"
            "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –±—Ä–∞—Ç–∏—à–∫–µ 18:00\n–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É '–¥–∞—Ç–∞' 10:00\n\n"
            "‚ú® –•–æ—á–µ—à—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º? –ò—Å–ø–æ–ª—å–∑—É–π #—Ç–µ–≥–∏:\n"
            "–°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç #—Ä–∞–±–æ—Ç–∞\n–ó–∞–±—Ä–∞—Ç—å –ø–ª–µ–º—è–Ω–Ω–∏–∫–∞ –∏–∑ —à–∫–æ–ª—ã #—Å–µ–º—å—è\n\n"
            "‚ú® –ù—É–∂–Ω–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∂–Ω–æ–º? –î–æ–±–∞–≤—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å –ø–æ–º–æ—â—å—é !:\n"
            "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä !–≤–∞–∂–Ω–æ\n–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç !–Ω–∏–∑–∫–∏–π\n\n"
            "‚ú® –í—Å—ë –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n"
            "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å –∫–æ–º–∞–Ω–¥–æ–π #—Ä–∞–±–æ—Ç–∞ !—Å—Ä–æ—á–Ω–æ 13:35\n\n"
            "‚ùì –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –∑–∞–±—ã–ª - –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–µ—Ä–∏ /help –∏–ª–∏ –≤—ã–±–µ—Ä–∏ /help –≤ –º–µ–Ω—é!\n\n"
            "–í–ø–µ—Ä–µ–¥ üöÄ",
            reply_markup=get_main_keyboard()
        )
        context.user_data['hint_start_shown'] = True
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    await update.message.reply_text(
        "‚ÑπÔ∏è –í–æ—Ç –∫–∞–∫ –ª–µ–≥–∫–æ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n"
            "‚ú® –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –∑–∞–¥–∞—á—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ö—É–ø–∏—Ç—å –∫–æ–ª–±–∞—Å–∫–∏ \n\n"
            "‚ú® –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á? –ü–∏—à–∏ –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
            "–ü–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∞\n–ö—É–ø–∏—Ç—å —Ö–ª–µ–±\n–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n\n"
            "‚ú® –í–∞–∂–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å? –ü–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∫–∞–∑–∞–≤ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞—á–µ:\n"
            "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –±—Ä–∞—Ç–∏—à–∫–µ 18:00\n–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É '–¥–∞—Ç–∞' 10:00\n\n"
            "‚ú® –•–æ—á–µ—à—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º? –ò—Å–ø–æ–ª—å–∑—É–π #—Ç–µ–≥–∏:\n"
            "–°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç #—Ä–∞–±–æ—Ç–∞\n–ó–∞–±—Ä–∞—Ç—å –ø–ª–µ–º—è–Ω–Ω–∏–∫–∞ –∏–∑ —à–∫–æ–ª—ã #—Å–µ–º—å—è\n\n"
            "‚ú® –ù—É–∂–Ω–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∂–Ω–æ–º? –î–æ–±–∞–≤—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å –ø–æ–º–æ—â—å—é !:\n"
            "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä !–≤–∞–∂–Ω–æ\n–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç !–Ω–∏–∑–∫–∏–π\n\n"
            "‚ú® –í—Å—ë –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n"
            "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å –∫–æ–º–∞–Ω–¥–æ–π #—Ä–∞–±–æ—Ç–∞ !—Å—Ä–æ—á–Ω–æ 13:35\n\n"
            "‚ùì –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –∑–∞–±—ã–ª - –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–µ—Ä–∏ /help –∏–ª–∏ –≤—ã–±–µ—Ä–∏ /help –≤ –º–µ–Ω—é!\n\n"
            "–£–¥–∞—á–∏! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è üòé"
    )

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = update.effective_user.id
    tasks = get_tasks_db(user_id, only_open=False)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if hasattr(context, 'user_data'):
        context.user_data['active_task_list'] = True
        context.user_data['active_category_view'] = False
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_markup = get_task_list_markup(user_id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–¥–∞—á
    if not tasks:
        message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á üôÇ"
        if update.callback_query:
            await update.callback_query.answer(message)
        else:
            await update.message.reply_text(message)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",
                reply_markup=keyboard_markup
            )
        else:
            await update.message.reply_text(
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",
                reply_markup=keyboard_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",
                reply_markup=keyboard_markup
            )
        except Exception as e2:
            logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {e2}")
            if update.message:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    await update.message.reply_text(
        "–í–≤–æ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–¥–∞—á–∞ 1\n–ó–∞–¥–∞—á–∞ 2\n –∏–ª–∏\n–ó–∞–¥–∞—á–∞ 1; –ó–∞–¥–∞—á–∞ 2)",
        reply_markup=get_cancel_keyboard()
    )
    return ADDING_TASK

async def save_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    user_id = update.message.from_user.id
    input_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if input_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∫ –∑–∞–¥–∞—á–∏
    MENU_BUTTONS = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]
    
    if not input_text:
        await update.message.reply_text("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if input_text in MENU_BUTTONS:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await main_menu_handler(update, context)
        return ConversationHandler.END
    
    tasks_list = [task.strip() for task in re.split(r';|\n', input_text) if task.strip()]
    
    for task_text in tasks_list:
        add_task_db(user_id, task_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if hasattr(context, 'user_data') and context.user_data.get('active_category_view', False):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await show_tasks_by_category(update, context)
    else:
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        await list_tasks(update, context)
    
    return ConversationHandler.END

async def add_task_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∫ –∑–∞–¥–∞—á–∏
    MENU_BUTTONS = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]
    
    if not text or text.startswith('/') or text in MENU_BUTTONS: return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if text in MENU_BUTTONS:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ ; –∏–ª–∏ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É —Å—Ç—Ä–æ–∫–∏
    tasks_list = [task.strip() for task in re.split(r';|\n', text) if task.strip()]
    for task_text in tasks_list:
        add_task_db(user_id, task_text)
    
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: user_id={user_id}, tasks={tasks_list}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if hasattr(context, 'user_data') and context.user_data.get('active_category_view', False):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await show_tasks_by_category(update, context)
    else:
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        await list_tasks(update, context)

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        Optional[int]: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ None
    """
    try:
        text = update.message.text
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
            return await add(update, context)
        elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ú–æ–∏ –∑–∞–¥–∞—á–∏' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
            await list_tasks(update, context)
            return ConversationHandler.END
        elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
            return await ask_delete_tasks(update, context)
        elif text == "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
            user_id = update.message.from_user.id
            delete_completed_tasks_for_user(user_id)
            await update.message.reply_text("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if hasattr(context, 'user_data') and context.user_data.get('active_category_view', False):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                await show_tasks_by_category(update, context)
            else:
                # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                await list_tasks(update, context)
            
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return ConversationHandler.END

async def ask_delete_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5-7):",
        reply_markup=get_cancel_keyboard()
    )
    return DELETING_TASKS

async def delete_tasks_by_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä–∞–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    user_id = update.message.from_user.id
    input_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if input_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á
    MENU_BUTTONS = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]
    
    if input_text in MENU_BUTTONS:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await main_menu_handler(update, context)
        return ConversationHandler.END
    
    input_text = input_text.replace(' ', '')
    tasks = get_tasks_db(user_id, only_open=False)
    to_delete = set()

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
    for part in input_text.split(','):
        if '-' in part:
            start_end = part.split('-')
            if len(start_end) == 2 and start_end[0].isdigit() and start_end[1].isdigit():
                start, end = map(int, start_end)
                for n in range(start, end + 1):
                    if 1 <= n <= len(tasks):
                        to_delete.add(tasks[n-1][0])

    if not to_delete:
        await update.message.reply_text(
            "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    for task_id in to_delete:
        delete_task_db(task_id, user_id)
    
    await update.message.reply_text("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())
    await list_tasks(update, context)
    return ConversationHandler.END

async def task_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    
    if data == "divider":
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        await query.answer()
        return
    
    if data == "toggle_all":
        tasks = get_tasks_db(user_id, only_open=False)
        if not tasks:
            await query.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        has_incomplete = any(not task[2] for task in tasks)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        # –ò–Ω–∞—á–µ —Å–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫–∏ —Å–æ –≤—Å–µ—Ö
        new_status = 1 if has_incomplete else 0
        
        for task_id, _, _, _, _ in tasks:
            toggle_task_status_db(task_id, new_status)
        
        await query.answer("–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑–º–µ–Ω–µ–Ω")
        await list_tasks(update, context)
        return
    
    if data == "priority_mode":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        await show_priority_menu(update, context)
        return
    
    if data == "category_mode":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await show_categories_menu(update, context)
        return

    if data == "reminder_mode":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        await show_reminders_menu(update, context)
        return
    
    if data.startswith("reminder_options_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await show_reminder_options(update, context)
        return
    
    if data.startswith("delete_reminder_"):
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await delete_reminder(update, context)
        return
    
    if data.startswith("snooze_reminder_"):
        # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await snooze_reminder(update, context)
        return
    
    if data.startswith("filter_category_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await show_tasks_by_category(update, context)
        return
    
    if data.startswith("set_priority_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        await show_priority_options(update, context)
        return
    
    if data.startswith("priority_"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
        await set_task_priority(update, context)
        return
    
    if data == "back_to_list":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if hasattr(context, 'user_data'):
            context.user_data['active_category_view'] = False
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await list_tasks(update, context)
        return

    if data.startswith("toggle_"):
        task_id = int(data.split("_")[1])
        toggle_task_status_db(task_id)
        await query.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if hasattr(context, 'user_data') and context.user_data.get('active_category_view', False):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await show_tasks_by_category(update, context)
            return
        else:
            # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            await list_tasks(update, context)
            return

async def show_priority_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–¥–∞—á
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    tasks = get_tasks_db(user_id, only_open=False)
    
    keyboard = []
    keyboard.append([
        InlineKeyboardButton(
            text="–ö–∞–∫–æ–π –∑–∞–¥–∞—á–µ –∑–∞–¥–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç?",
            callback_data="divider"
        )
    ])
    
    # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    priority_emoji = {
        3: "üî¥", # –í—ã—Å–æ–∫–∏–π
        2: "üü°", # –°—Ä–µ–¥–Ω–∏–π
        1: "üîµ"  # –ù–∏–∑–∫–∏–π
    }
    
    for i, (task_id, text, done, priority, reminder_time) in enumerate(tasks, 1):
        # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        short_text = text[:30] + "..." if len(text) > 30 else text
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        priority_icon = ""
        if priority > 0:
            priority_icon = f"{priority_emoji.get(priority, '')} "
        
        task_text = f"{i}. {priority_icon}{short_text}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=task_text,
                callback_data=f"set_priority_{task_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_list"
        )
    ])
    
    await query.edit_message_text(
        text="üîÑ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_priority_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(query.data.split('_')[2])
    
    keyboard = [
        [
            InlineKeyboardButton(
                text="üî¥ –í—ã—Å–æ–∫–∏–π",
                callback_data=f"priority_{task_id}_3"
            )
        ],
        [
            InlineKeyboardButton(
                text="üü° –°—Ä–µ–¥–Ω–∏–π",
                callback_data=f"priority_{task_id}_2"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîµ –ù–∏–∑–∫–∏–π",
                callback_data=f"priority_{task_id}_1"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data="priority_mode"
            )
        ]
    ]
    
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def set_task_priority(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ callback_data
    parts = query.data.split('_')
    task_id = int(parts[1])
    priority = int(parts[2])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_task_priority(task_id, priority)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    await show_priority_menu(update, context)

async def show_categories_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á
    """
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    tasks = get_tasks_db(user_id, only_open=False)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∑–∞–¥–∞—á
    categories = {}
    for task_id, text, done, priority, reminder_time in tasks:
        task_categories = extract_categories(text)
        for category in task_categories:
            if category in categories:
                categories[category] += 1
            else:
                categories[category] = 1

    keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if not categories:
        keyboard.append([
            InlineKeyboardButton(
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                callback_data="divider"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤—å—Ç–µ #–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –∑–∞–¥–∞—á–µ",
                callback_data="divider"
            )
        ])
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á
        sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)
        
        for category, count in sorted_categories:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"#{category} ({count})",
                    callback_data=f"filter_category_{category}"
                )
            ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º",
            callback_data="back_to_list"
        )
    ])
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    await query.edit_message_text(
        text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_tasks_by_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data –∏–ª–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if query and hasattr(query, 'data') and query.data.startswith("filter_category_"):
        category = query.data.split('_')[2]
        await query.answer()
    elif hasattr(context, 'user_data') and 'current_view' in context.user_data and context.user_data['current_view']['type'] == 'category':
        category = context.user_data['current_view']['category']
    else:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if query:
            await query.answer()
            await show_categories_menu(update, context)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    
    context.user_data['current_view'] = {
        'type': 'category',
        'category': category
    }
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    context.user_data['active_category_view'] = True
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    context.user_data['active_task_list'] = False

    tasks = get_tasks_db(user_id, only_open=False)
    
    keyboard = []
    keyboard.append([
        InlineKeyboardButton(
            text=f"–ó–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{category}:",
            callback_data="divider"
        )
    ])
    
    # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    priority_emoji = {
        3: "üî¥", # –í—ã—Å–æ–∫–∏–π
        2: "üü°", # –°—Ä–µ–¥–Ω–∏–π
        1: "üîµ"  # –ù–∏–∑–∫–∏–π
    }
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    found = False
    for task_id, text, done, priority, reminder_time in tasks:
        task_categories = extract_categories(text)
        if category in task_categories:
            found = True
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            status = "‚úÖ" if done else "‚òê"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            task_text = f"{status} "
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ 0)
            if priority > 0:
                priority_icon = priority_emoji.get(priority, "")
                task_text += f"{priority_icon} "
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            task_text += text
            
            keyboard.append([
                InlineKeyboardButton(
                    text=task_text,
                    callback_data=f"toggle_{task_id}",
                )
            ])
    
    if not found:
        keyboard.append([
            InlineKeyboardButton(
                text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–¥–∞—á",
                callback_data="divider"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            callback_data="category_mode"
        )
    ])
    
    message_text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è #{category}:"
    
    # –ï—Å–ª–∏ —ç—Ç–æ callback_query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if query:
        try:
            await query.edit_message_text(
                text=message_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ç–µ–ª–µ–≥—Ä–∞–º –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É
            # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–µ
            logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback_query (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.effective_message.reply_text(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def show_reminders_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    tasks_with_reminders = get_tasks_with_reminders(user_id)
    
    keyboard = []
    keyboard.append([
        InlineKeyboardButton(
            text="–ó–∞–¥–∞—á–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:",
            callback_data="divider"
        )
    ])
    
    if not tasks_with_reminders:
        keyboard.append([
            InlineKeyboardButton(
                text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏",
                callback_data="divider"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∫ –∑–∞–¥–∞—á–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                callback_data="divider"
            )
        ])
    else:
        # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        priority_emoji = {
            3: "üî¥", # –í—ã—Å–æ–∫–∏–π
            2: "üü°", # –°—Ä–µ–¥–Ω–∏–π
            1: "üîµ"  # –ù–∏–∑–∫–∏–π
        }
        
        for task_id, text, done, priority, reminder_time in tasks_with_reminders:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
            if reminder_time:
                reminder_dt = datetime.strptime(reminder_time, '%Y-%m-%d %H:%M:%S')
                reminder_str = reminder_dt.strftime('%d.%m %H:%M')
            else:
                reminder_str = "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            status = "‚úÖ" if done else "‚òê"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            priority_icon = ""
            if priority > 0:
                priority_icon = f"{priority_emoji.get(priority, '')} "
            
            task_text = f"{status} {priority_icon}[{reminder_str}] {text}"
            
            keyboard.append([
                InlineKeyboardButton(
                    text=task_text,
                    callback_data=f"reminder_options_{task_id}"
                )
            ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á",
            callback_data="back_to_list"
        )
    ])
    
    await query.edit_message_text(
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_reminder_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(query.data.split('_')[2])
    
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                callback_data=f"delete_reminder_{task_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 30 –º–∏–Ω—É—Ç",
                callback_data=f"snooze_reminder_{task_id}_30"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å",
                callback_data=f"snooze_reminder_{task_id}_60"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
                callback_data=f"snooze_reminder_{task_id}_tomorrow"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º",
                callback_data="reminder_mode"
            )
        ]
    ]
    
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def delete_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(query.data.split('_')[2])
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NULL)
    set_reminder(task_id, None)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await show_reminders_menu(update, context)

async def send_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
    """
    job = context.job
    task_id, user_id, task_text = job.data
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç—Ä–µ–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ / –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏",
                callback_data=f"toggle_{task_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å",
                callback_data=f"snooze_reminder_{task_id}_60"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìÜ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
                callback_data=f"snooze_reminder_{task_id}_tomorrow"
            )
        ]
    ]
    
    await context.bot.send_message(
        chat_id=user_id,
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task_text}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def snooze_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    task_id = int(parts[2])
    snooze_value = parts[3]

    # –í—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ (UTC+3)
    now = datetime.now(timezone.utc).astimezone(timezone(timedelta(hours=3)))

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ë–î
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT reminder_time FROM tasks WHERE id = ?", (task_id,))
    result = c.fetchone()
    conn.close()

    reminder_time = None
    if result and result[0]:
        try:
            reminder_time = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone(timedelta(hours=3)))
        except Exception:
            reminder_time = now  # fallback

    if snooze_value == "tomorrow":
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è, —á—Ç–æ –±—ã–ª–æ —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if reminder_time:
            new_reminder = reminder_time + timedelta(days=1)
        else:
            new_reminder = now + timedelta(days=1)
        new_reminder = new_reminder.replace(second=0)
    else:
        try:
            minutes = int(snooze_value)
            new_reminder = now + timedelta(minutes=minutes)
            new_reminder = new_reminder.replace(second=0)
        except Exception:
            new_reminder = now + timedelta(hours=1)
            new_reminder = new_reminder.replace(second=0)

    set_reminder(task_id, new_reminder)
    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {new_reminder}")

    await query.edit_message_text(
        text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {new_reminder.strftime('%d.%m.%Y %H:%M')}",
        reply_markup=None
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    task_text = get_task_text_by_id(task_id)
    if task_text:
        job_name = f"reminder_{task_id}"
        current_jobs = context.job_queue.get_jobs_by_name(job_name)
        for job in current_jobs:
            job.schedule_removal()

        context.job_queue.run_once(
            send_reminder,
            when=(new_reminder - now).total_seconds(),
            data=(task_id, query.from_user.id, task_text),
            name=job_name
        )

def get_task_text_by_id(task_id: int) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏
        
    Returns:
        –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT text FROM tasks WHERE id = ?", (task_id,))
    result = c.fetchone()
    conn.close()
    
    return result[0] if result else None

