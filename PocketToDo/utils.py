import re
import logging
from datetime import datetime, timedelta, timezone
from typing import Tuple, List, Optional

logger = logging.getLogger(__name__)

def extract_reminder_time(text: str) -> Tuple[Optional[datetime], str]:
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: '{text}'")
    match = re.search(r'@(\d{1,2}):(\d{2})', text)
    if not match:
        logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None, text
    hour = int(match.group(1))
    minute = int(match.group(2))
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: {hour}:{minute}")
    clean_text = re.sub(r'@\d{1,2}:\d{2}', '', text).strip()
    now = datetime.now(timezone.utc).astimezone(timezone(timedelta(hours=3)))
    reminder_time = datetime(now.year, now.month, now.day, hour, minute, tzinfo=timezone(timedelta(hours=3)))
    if reminder_time < now:
        reminder_time = reminder_time + timedelta(days=1)
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞: {reminder_time}")
    return reminder_time, clean_text

def extract_categories(text: str) -> List[str]:
    hashtags = re.findall(r'#(\w+)', text)
    return hashtags

priority_map = {
    # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    '–≤—ã—Å–æ–∫–∏–π': 3, '–≤—ã—Å–æ–∫–∞—è': 3, '–≤–∞–∂–Ω–æ': 3, '–≤–∞–∂–Ω–∞—è': 3, '–≥–ª–∞–≤–Ω–æ–µ': 3, '–≥–ª–∞–≤–Ω–∞—è': 3,
    '—Å—Ä–æ—á–Ω–æ': 3, '—Å—Ä–æ—á–Ω–∞—è': 3, '–∫—Ä–∞—Å–Ω—ã–π': 3, 'üî•': 3, '‚ÄºÔ∏è': 3, '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ': 3,
    'urgent': 3, 'top': 3, 'critical': 3, '–∫—Ä–∏—Ç–∏—á–Ω–æ': 3, 'must': 3, 'mustdo': 3, 'must-do': 3,
    '–ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω–æ': 3, '–ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω–∞—è': 3, '–ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—ã–π': 3, '–≤–∞–∂–Ω–µ–π—à–µ–µ': 3, 'asap': 3,
    '1': 3, '—Å—Ä–æ—á–Ω–æ!': 3, '1!': 3, # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ "! 1" –∏ "!1"

    # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    '—Å—Ä–µ–¥–Ω–∏–π': 2, '—Å—Ä–µ–¥–Ω—è—è': 2, '—Å—Ä–µ–¥–Ω–µ–µ': 2, '—Å—Ä–µ–¥–Ω–µ': 2, '–∂–µ–ª—Ç—ã–π': 2, '–∂—ë–ª—Ç—ã–π': 2,
    'yellow': 2, '–æ–±—ã—á–Ω–æ': 2, '–æ–±—ã—á–Ω–∞—è': 2, '–æ–±—ã—á–Ω—ã–π': 2, '–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ': 2, '–º–æ–∂–Ω–æ_–ø–æ–∑–∂–µ': 2,
    '–º–æ–∂–Ω–æ-–ø–æ–∑–∂–µ': 2, '–Ω–µ —Å—Ä–æ—á–Ω–æ': 2, '–Ω–µ—Å—Ä–æ—á–Ω–æ': 2, 'regular': 2, '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 2, '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è': 2,
    '2': 2, '—Å—Ä–µ–¥–Ω–µ!': 2, '2!': 2, # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ "! 2" –∏ "!2"

    # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    '–Ω–∏–∑–∫–∏–π': 1, '–Ω–∏–∑–∫–∞—è': 1, '–Ω–∏–∑–∫–æ': 1, '—Å–∏–Ω–∏–π': 1, 'blue': 1, '–æ—Ç–ª–æ–∂–∏—Ç—å': 1,
    '–Ω–µ–≤–∞–∂–Ω–æ': 1, '–Ω–µ–≤–∞–∂–Ω–∞—è': 1, 'optional': 1, '–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ': 1, '–º–æ–∂–Ω–æ –Ω–µ –¥–µ–ª–∞—Ç—å': 1,
    '–º–æ–∂–Ω–æ_–Ω–µ_–¥–µ–ª–∞—Ç—å': 1, '–º–æ–∂–Ω–æ-–Ω–µ-–¥–µ–ª–∞—Ç—å': 1, '–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å': 1, 'someday': 1,
    '–ø–æ—Ç–æ–º': 1, 'later': 1, '–Ω–µ —Å–ø–µ—à–Ω–æ': 1, '–Ω–µ—Å—Ä–æ—á–Ω–∞—è': 1, '–Ω–µ—Å—Ä–æ—á–Ω—ã–π': 1,
    '3': 1, '–Ω–∏–∑–∫–æ!': 1, '3!': 1 # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ "! 3" –∏ "!3"
}

def extract_priority(text: str) -> Tuple[int, str]:
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: '{text}'")
    # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∫–∞–∫ '!–≤–∞–∂–Ω–æ', '! –≤–∞–∂–Ω–æ', '! 1', '!1' –∏ —Ç.–¥.
    match = re.search(r'!\s*([\w\d]+)', text, re.IGNORECASE)
    if not match:
        logger.info("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 0, text
    priority_text = match.group(1).lower()
    logger.info(f"–ù–∞–π–¥–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}")
    priority = priority_map.get(priority_text, 0)
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ '!–≤–∞–∂–Ω–æ', —Ç–∞–∫ –∏ '! –≤–∞–∂–Ω–æ', '! 1', '!1'
    clean_text = re.sub(r'!\s*[\w\d]+', '', text).strip()
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}, –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{clean_text}'")
    return priority, clean_text
