import re
import logging
from datetime import datetime, timedelta, timezone
from typing import Tuple, List, Optional

logger = logging.getLogger(__name__)

def extract_reminder_time(text: str) -> Tuple[Optional[datetime], str]:
    logger.info(f"extract_reminder_time called with text: '{text}'")
    
    try:
        now = datetime.now(timezone.utc).astimezone(timezone(timedelta(hours=3)))
        
        # –°–ª–æ–≤–∞—Ä—å –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        weekdays = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–ø–Ω': 0,
            '–≤—Ç–æ—Ä–Ω–∏–∫': 1, '–≤—Ç': 1,
            '—Å—Ä–µ–¥–∞': 2, '—Å—Ä': 2, '—Å—Ä–µ–¥—É': 2,
            '—á–µ—Ç–≤–µ—Ä–≥': 3, '—á—Ç': 3,
            '–ø—è—Ç–Ω–∏—Ü–∞': 4, '–ø—Ç': 4, '–ø—è—Ç–Ω–∏—Ü—É': 4,
            '—Å—É–±–±–æ—Ç–∞': 5, '—Å–±': 5, '—Å—É–±–±–æ—Ç—É': 5,
            '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6, '–≤—Å': 6
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 09:00)
        weekday_pattern = '|'.join(weekdays.keys())
        match = re.search(rf'({weekday_pattern})\s+(\d{{1,2}}):(\d{{2}})', text, re.IGNORECASE)
        if match:
            logger.info(f"Found weekday with time pattern: {match.group(0)}")
            weekday_name = match.group(1).lower()
            hour = int(match.group(2))
            minute = int(match.group(3))
            
            target_weekday = weekdays[weekday_name]
            current_weekday = now.weekday()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            days_ahead = target_weekday - current_weekday
            if days_ahead <= 0:  # –ï—Å–ª–∏ –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                days_ahead += 7  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
            
            target_date = now + timedelta(days=days_ahead)
            reminder_time = datetime(target_date.year, target_date.month, target_date.day, 
                                   hour, minute, tzinfo=timezone(timedelta(hours=3)))
            
            clean_text = re.sub(rf'({weekday_pattern})\s+(\d{{1,2}}):(\d{{2}})', '', text, flags=re.IGNORECASE).strip()
            logger.info(f"Weekday reminder time set to: {reminder_time}")
            return reminder_time, clean_text
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 09:00
        match = re.search(rf'\b({weekday_pattern})\b', text, re.IGNORECASE)
        if match:
            logger.info(f"Found weekday only pattern: {match.group(0)}")
            weekday_name = match.group(1).lower()
            
            target_weekday = weekdays[weekday_name]
            current_weekday = now.weekday()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            days_ahead = target_weekday - current_weekday
            if days_ahead <= 0:  # –ï—Å–ª–∏ –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                days_ahead += 7  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
            
            target_date = now + timedelta(days=days_ahead)
            reminder_time = datetime(target_date.year, target_date.month, target_date.day, 
                                   9, 0, tzinfo=timezone(timedelta(hours=3)))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 09:00
            
            clean_text = re.sub(rf'\b({weekday_pattern})\b', '', text, flags=re.IGNORECASE).strip()
            logger.info(f"Weekday-only reminder time set to: {reminder_time} (default 09:00)")
            return reminder_time, clean_text
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ (29.05 10:00)
        match = re.search(r'(\d{1,2})\.(\d{1,2})\s+(\d{1,2}):(\d{2})', text)
        if match:
            logger.info(f"Found date pattern: {match.group(0)}")
            day = int(match.group(1))
            month = int(match.group(2))
            hour = int(match.group(3))
            minute = int(match.group(4))
            year = now.year
            
            try:
                reminder_time = datetime(year, month, day, hour, minute, tzinfo=timezone(timedelta(hours=3)))
                if reminder_time < now:
                    reminder_time = datetime(year + 1, month, day, hour, minute, tzinfo=timezone(timedelta(hours=3)))
            except ValueError as e:
                logger.error(f"Invalid date in reminder: {e}")
                return None, text
            
            clean_text = re.sub(r'(\d{1,2})\.(\d{1,2})\s+(\d{1,2}):(\d{2})', '', text).strip()
            logger.info(f"Reminder time set to: {reminder_time}")
            return reminder_time, clean_text
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "–∑–∞–≤—Ç—Ä–∞ –ß–ß:–ú–ú"
        match = re.search(r'–∑–∞–≤—Ç—Ä–∞\s+(\d{1,2}):(\d{2})', text, re.IGNORECASE)
        if match:
            logger.info(f"Found 'tomorrow' pattern: {match.group(0)}")
            hour = int(match.group(1))
            minute = int(match.group(2))
            
            reminder_time = datetime(now.year, now.month, now.day, hour, minute, tzinfo=timezone(timedelta(hours=3)))
            reminder_time = reminder_time + timedelta(days=1)
            
            clean_text = re.sub(r'–∑–∞–≤—Ç—Ä–∞\s+(\d{1,2}):(\d{2})', '', text, flags=re.IGNORECASE).strip()
            logger.info(f"Tomorrow reminder time set to: {reminder_time}")
            return reminder_time, clean_text
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "—Å–µ–≥–æ–¥–Ω—è –ß–ß:–ú–ú"
        match = re.search(r'—Å–µ–≥–æ–¥–Ω—è\s+(\d{1,2}):(\d{2})', text, re.IGNORECASE)
        if match:
            logger.info(f"Found 'today' pattern: {match.group(0)}")
            hour = int(match.group(1))
            minute = int(match.group(2))
            
            reminder_time = datetime(now.year, now.month, now.day, hour, minute, tzinfo=timezone(timedelta(hours=3)))
            if reminder_time < now:
                reminder_time = reminder_time + timedelta(days=1)
            
            clean_text = re.sub(r'—Å–µ–≥–æ–¥–Ω—è\s+(\d{1,2}):(\d{2})', '', text, flags=re.IGNORECASE).strip()
            logger.info(f"Today reminder time set to: {reminder_time}")
            return reminder_time, clean_text
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –¥–∞—Ç—ã (–ß–ß:–ú–ú)
        match = re.search(r'(\d{1,2}):(\d{2})', text)
        if match:
            logger.info(f"Found time-only pattern: {match.group(0)}")
            hour = int(match.group(1))
            minute = int(match.group(2))
            
            reminder_time = datetime(now.year, now.month, now.day, hour, minute, tzinfo=timezone(timedelta(hours=3)))
            if reminder_time < now:
                reminder_time = reminder_time + timedelta(days=1)
            
            clean_text = re.sub(r'(\d{1,2}):(\d{2})', '', text).strip()
            logger.info(f"Time-only reminder set to: {reminder_time}")
            return reminder_time, clean_text
        
        logger.info("No time pattern found at all")
        return None, text
        
    except Exception as e:
        logger.error(f"Unexpected error in extract_reminder_time: {e}")
        return None, text


def extract_categories(text: str) -> List[str]:
    hashtags = re.findall(r'#(\w+)', text)
    return hashtags

priority_map = {
    # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    '–≤—ã—Å–æ–∫–∏–π': 3, '–≤—ã—Å–æ–∫–∞—è': 3, '–≤–∞–∂–Ω–æ': 3, '–≤–∞–∂–Ω–∞—è': 3, '–≥–ª–∞–≤–Ω–æ–µ': 3, '–≥–ª–∞–≤–Ω–∞—è': 3,
    '—Å—Ä–æ—á–Ω–æ': 3, '—Å—Ä–æ—á–Ω–∞—è': 3, '–∫—Ä–∞—Å–Ω—ã–π': 3, 'üî•': 3, '‚ÄºÔ∏è': 3, '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ': 3,
    'urgent': 3, 'top': 3, 'critical': 3, '–∫—Ä–∏—Ç–∏—á–Ω–æ': 3, 'must': 3, 'mustdo': 3, 'must-do': 3,
    '–ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω–æ': 3, '–ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω–∞—è': 3, '–ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—ã–π': 3, '–≤–∞–∂–Ω–µ–π—à–µ–µ': 3, 'asap': 3,
    '1': 3, '—Å—Ä–æ—á–Ω–æ!': 3, '1!': 3, # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ "! 1" –∏ "!1"

    # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    '—Å—Ä–µ–¥–Ω–∏–π': 2, '—Å—Ä–µ–¥–Ω—è—è': 2, '—Å—Ä–µ–¥–Ω–µ–µ': 2, '—Å—Ä–µ–¥–Ω–µ': 2, '–∂–µ–ª—Ç—ã–π': 2, '–∂—ë–ª—Ç—ã–π': 2,
    'yellow': 2, '–æ–±—ã—á–Ω–æ': 2, '–æ–±—ã—á–Ω–∞—è': 2, '–æ–±—ã—á–Ω—ã–π': 2, '–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ': 2, '–º–æ–∂–Ω–æ_–ø–æ–∑–∂–µ': 2,
    '–º–æ–∂–Ω–æ-–ø–æ–∑–∂–µ': 2, '–Ω–µ —Å—Ä–æ—á–Ω–æ': 2, '–Ω–µ—Å—Ä–æ—á–Ω–æ': 2, 'regular': 2, '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 2, '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è': 2,
    '2': 2, '—Å—Ä–µ–¥–Ω–µ!': 2, '2!': 2, # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ "! 2" –∏ "!2"

    # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    '–Ω–∏–∑–∫–∏–π': 1, '–Ω–∏–∑–∫–∞—è': 1, '–Ω–∏–∑–∫–æ': 1, '—Å–∏–Ω–∏–π': 1, 'blue': 1, '–æ—Ç–ª–æ–∂–∏—Ç—å': 1,
    '–Ω–µ–≤–∞–∂–Ω–æ': 1, '–Ω–µ–≤–∞–∂–Ω–∞—è': 1, 'optional': 1, '–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ': 1, '–º–æ–∂–Ω–æ –Ω–µ –¥–µ–ª–∞—Ç—å': 1,
    '–º–æ–∂–Ω–æ_–Ω–µ_–¥–µ–ª–∞—Ç—å': 1, '–º–æ–∂–Ω–æ-–Ω–µ-–¥–µ–ª–∞—Ç—å': 1, '–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å': 1, 'someday': 1,
    '–ø–æ—Ç–æ–º': 1, 'later': 1, '–Ω–µ —Å–ø–µ—à–Ω–æ': 1, '–Ω–µ—Å—Ä–æ—á–Ω–∞—è': 1, '–Ω–µ—Å—Ä–æ—á–Ω—ã–π': 1,
    '3': 1, '–Ω–∏–∑–∫–æ!': 1, '3!': 1 # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ "! 3" –∏ "!3"
}

def extract_priority(text: str) -> Tuple[int, str]:
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: '{text}'")
    # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∫–∞–∫ '!–≤–∞–∂–Ω–æ', '! –≤–∞–∂–Ω–æ', '! 1', '!1' –∏ —Ç.–¥.
    match = re.search(r'!\s*([\w\d]+)', text, re.IGNORECASE)
    if not match:
        logger.info("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 0, text
    priority_text = match.group(1).lower()
    logger.info(f"–ù–∞–π–¥–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}")
    priority = priority_map.get(priority_text, 0)
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ '!–≤–∞–∂–Ω–æ', —Ç–∞–∫ –∏ '! –≤–∞–∂–Ω–æ', '! 1', '!1'
    clean_text = re.sub(r'!\s*[\w\d]+', '', text).strip()
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}, –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{clean_text}'")
    return priority, clean_text
