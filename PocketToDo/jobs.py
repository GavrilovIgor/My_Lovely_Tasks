import logging
from typing import Any
from datetime import datetime, timedelta, timezone
from telegram.ext import CallbackContext
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from database import check_due_reminders, set_reminder

logger = logging.getLogger(__name__)

async def send_reminder_notification(context: CallbackContext) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    due_tasks = check_due_reminders()
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: –Ω–∞–π–¥–µ–Ω–æ {len(due_tasks)} –∑–∞–¥–∞—á")
    
    if len(due_tasks) > 0:
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {due_tasks}")
    
    for task_id, user_id, text, done, reminder_time in due_tasks:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç—Ä–µ–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ / –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏",
                        callback_data=f"toggle_{task_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å",
                        callback_data=f"snooze_reminder_{task_id}_60"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìÜ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
                        callback_data=f"snooze_reminder_{task_id}_tomorrow"
                    )
                ]
            ]
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞–¥–∞—á–µ {task_id}")
            
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            import sqlite3
            from database import DB_PATH
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("UPDATE tasks SET reminder_time = NULL WHERE id = ?", (task_id,))
            conn.commit()
            conn.close()
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ: {task_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
