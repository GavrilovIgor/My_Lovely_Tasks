import logging
from datetime import datetime, timedelta, timezone
from telegram.ext import CallbackContext
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from database import check_due_reminders, set_reminder

logger = logging.getLogger(__name__)

async def send_reminder_notification(context: CallbackContext) -> None:
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    due_tasks = check_due_reminders()
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: –Ω–∞–π–¥–µ–Ω–æ {len(due_tasks)} –∑–∞–¥–∞—á")
    if len(due_tasks) > 0:
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {due_tasks}")
    for task_id, user_id, text, done, reminder_time in due_tasks:
        try:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ / –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏", callback_data=f"toggle_{task_id}")],
                [InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å", callback_data=f"snooze_reminder_{task_id}_60")],
                [InlineKeyboardButton("üìÜ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data=f"snooze_reminder_{task_id}_tomorrow")]
            ]
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞–¥–∞—á–µ {task_id}")
            set_reminder(task_id, None)
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ: {task_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –£–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã, –±–ª–æ–∫ —Å —Ä—É—á–Ω—ã–º sqlite3 –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –≤—ã–∑–æ–≤ set_reminder
