import logging
from datetime import datetime, timedelta, timezone
from telegram.ext import CallbackContext
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from database import check_due_reminders, set_reminder

logger = logging.getLogger(__name__)

async def send_reminder_notification(context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    due_tasks = check_due_reminders()
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ {datetime.now(timezone(timedelta(hours=3)))}: –Ω–∞–π–¥–µ–Ω–æ {len(due_tasks)} –∑–∞–¥–∞—á")
    
    if len(due_tasks) > 0:
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {due_tasks}")
        
        for task_id, user_id, text, done, reminder_time in due_tasks:
            try:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ callback_data
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"toggle_{task_id}")],
                    [InlineKeyboardButton("üîï –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=f"delete_reminder_{task_id}")],
                    [InlineKeyboardButton("üîî –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å", callback_data=f"snooze_reminder_{task_id}_60")],
                    [InlineKeyboardButton("üîî –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è", callback_data=f"snooze_reminder_{task_id}_tomorrow")],
                    [InlineKeyboardButton("üïê –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", callback_data=f"custom_reminder_{task_id}")]
                ]
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞–¥–∞—á–µ {task_id}")
                
                # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                set_reminder(task_id, None)
                
            except Exception as e:
                if "bot can't initiate conversation" in str(e) or "Forbidden" in str(e):
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É {task_id}")
                    set_reminder(task_id, None)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def send_feature_announcements(context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ–∏—á–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∏—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    from database import get_active_features_db, get_users_without_notification_db, mark_feature_sent_db
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ–∏—á–∏ (–Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–µ)
    active_features = get_active_features_db(include_test=False)
    
    for feature_id, feature_name, title, description, version, created_at, is_test in active_features:
        users_to_notify = get_users_without_notification_db(feature_id)
        
        if not users_to_notify:
            continue
            
        logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ñ–∏—á–µ '{feature_name}' –¥–ª—è {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚ú® –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", callback_data=f"try_feature_{feature_id}")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"feature_info_{feature_id}")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notification")]
        ]
        
        version_text = f" (–≤–µ—Ä—Å–∏—è {version})" if version else ""
        message_text = f"üéâ **–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {title}**{version_text}\n\n{description}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
        
        sent_count = 0
        for user_id in users_to_notify:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                mark_feature_sent_db(user_id, feature_id)
                sent_count += 1
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ñ–∏—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                if "bot can't initiate conversation" in str(e) or "Forbidden" in str(e):
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    mark_feature_sent_db(user_id, feature_id)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ñ–∏—á–µ '{feature_name}'")

async def send_test_feature_announcements(context: CallbackContext, test_user_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∏—á–∞—Ö —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    logger.info(f"üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∏—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}")
    
    from database import get_active_features_db, get_users_without_notification_db, mark_feature_sent_db
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∏—á–∏
    all_features = get_active_features_db(include_test=True)
    test_features = [f for f in all_features if f[6] == 1]  # is_test = 1
    