from typing import List, Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from database import get_tasks_db

priority_emoji = {
    3: "üî¥", # –í—ã—Å–æ–∫–∏–π
    2: "üü°", # –°—Ä–µ–¥–Ω–∏–π
    1: "üîµ"  # –ù–∏–∑–∫–∏–π
}

def get_main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"],
            ["üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"],
            ["ü´∂ –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç"]
        ], 
        resize_keyboard=True
    )

def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_task_list_markup(owner_id: int) -> Optional[InlineKeyboardMarkup]:
    tasks = get_tasks_db(owner_id, only_open=False)
    keyboard = []
    
    total = len(tasks)
    done_count = sum(1 for task in tasks if task[2])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    keyboard.append([
        InlineKeyboardButton(text=f"üîÑ [ {done_count}/{total} ] [ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ ]", callback_data="toggle_all")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    keyboard.append([
        InlineKeyboardButton(text="#Ô∏è‚É£ [ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ]", callback_data="category_mode")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    keyboard.append([
        InlineKeyboardButton(text="üî¢ [ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ]", callback_data="priority_mode")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    keyboard.append([
        InlineKeyboardButton(text="üÜô [ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ]", callback_data="reminder_mode")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ú–æ–∏ –∑–∞–¥–∞—á–∏"
    keyboard.append([InlineKeyboardButton(text="‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data="divider")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    for task_id, text, done, priority, reminder_time in tasks:
        status = "‚úÖ" if done else "‚òê"
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º task_text
        task_text = status
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ü–û–°–õ–ï —Å—Ç–∞—Ç—É—Å–∞
        if priority > 0:
            priority_icon = f"{priority_emoji.get(priority, '')}"
            task_text = f"{status}{priority_icon}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if reminder_time:
            task_text = f"{task_text}üîî"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        task_text = f"{task_text} {text}"
        
        keyboard.append([
            InlineKeyboardButton(text=task_text, callback_data=f"toggle_{task_id}"),
        ])
    
    return InlineKeyboardMarkup(keyboard) if keyboard else None


