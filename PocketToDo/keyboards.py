from typing import List, Dict, Optional, Any, Tuple
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

from database import get_tasks_db

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    return ReplyKeyboardMarkup(
        [
            ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"],
            ["üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"]
        ], 
        resize_keyboard=True
    )

def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    """
    return ReplyKeyboardMarkup(
        [["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_task_list_markup(user_id: int) -> Optional[InlineKeyboardMarkup]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        InlineKeyboardMarkup –∏–ª–∏ None, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–¥–∞—á
    """
    tasks = get_tasks_db(user_id, only_open=False)
    keyboard = []

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    total = len(tasks)
    done_count = sum(1 for task in tasks if task[2])
    keyboard.append([
        InlineKeyboardButton(
            text=f"üîÑ [ {done_count}/{total} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ]",
            callback_data="toggle_all"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–π
    keyboard.append([
        InlineKeyboardButton(
            text=f"#Ô∏è‚É£ [ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ]",
            callback_data="category_mode"
        )
    ])
    
    keyboard.append([
        InlineKeyboardButton(
            text=f"üî¢ [ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ]",
            callback_data="priority_mode"
        )
    ])
    
    keyboard.append([
        InlineKeyboardButton(
            text=f"üÜô [ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ]",
            callback_data="reminder_mode"
        )
    ])
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    keyboard.append([
        InlineKeyboardButton(text="‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ", callback_data="divider")
    ])

    # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    priority_emoji = {
        3: "üî¥", # –í—ã—Å–æ–∫–∏–π
        2: "üü°", # –°—Ä–µ–¥–Ω–∏–π
        1: "üîµ"  # –ù–∏–∑–∫–∏–π
    }

    for task_id, text, done, priority, reminder_time in tasks:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        status = "‚úÖ" if done else "‚òê"
        task_text = f"{status} "
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if priority > 0:
            priority_icon = priority_emoji.get(priority, "")
            task_text += f"{priority_icon} "
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if reminder_time:
            task_text += f"üîî "
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        task_text += text
        
        keyboard.append([
            InlineKeyboardButton(
                text=task_text,
                callback_data=f"toggle_{task_id}",
            )
        ])

    return InlineKeyboardMarkup(keyboard) if keyboard else None
