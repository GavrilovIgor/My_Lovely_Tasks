import os
import logging
import signal
import sys
from datetime import datetime, timedelta, timezone
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ConversationHandler, CallbackQueryHandler, ContextTypes, PreCheckoutQueryHandler
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
print(f"TOKEN: {'SET' if TOKEN else 'NOT SET'}")
print(f"YOOKASSA_SHOP_ID: {'SET' if YOOKASSA_SHOP_ID else 'NOT SET'}")
print(f"YOOKASSA_SECRET_KEY: {'SET' if YOOKASSA_SECRET_KEY else 'NOT SET'}")

DB_PATH = "data/tasks.db"
os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADDING_TASK = 1
DELETING_TASKS = 2

logs_dir = "logs"
if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)
log_file = os.path.join(logs_dir, "bot.log")
logging.basicConfig(
    handlers=[logging.FileHandler(log_file), logging.StreamHandler()],
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

from database import init_db
from handlers import (start, help_command, list_tasks, add, save_task, task_action, 
                     add_task_from_text, main_menu_handler, ask_delete_tasks, 
                     delete_tasks_by_numbers, send_reminder, SETTING_CUSTOM_REMINDER, 
                     save_custom_reminder, start_custom_reminder, support_developer, 
                     handle_donation_callback, pre_checkout_donation_handler, 
                     successful_donation_handler, stop_bot, handle_feature_notification,
                     admin_add_feature, admin_list_features, admin_deactivate_feature, test_feature_notifications, promote_test_feature)

from jobs import send_reminder_notification, send_feature_announcements

menu_filter = (
    filters.Regex(r"^üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏$") |
    filters.Regex(r"^üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ$") |
    filters.Regex(r"^ü´∂ –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç$")
) & ~filters.COMMAND

async def setup_commands(application):
    from telegram import BotCommand, BotCommandScopeDefault
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
        BotCommand("list", "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"),
        BotCommand("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"),
    ]
    await application.bot.set_my_commands(commands, scope=BotCommandScopeDefault())
    logger.info("Bot commands set up successfully")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}"
    print(error_message)

def signal_handler(sig, frame):
    print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ó–∞–∫—Ä—ã–≤–∞—é –±–æ—Ç–∞...")
    logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ —Å–∏–≥–Ω–∞–ª—É")
    sys.exit(0)

def main():
    app = Application.builder().token(TOKEN).build()
    init_db()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add", add)],
        states={
            ADDING_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_task)],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
    )

    delete_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏$"), ask_delete_tasks)],
        states={
            DELETING_TASKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_tasks_by_numbers)],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
)

    from handlers import SETTING_CUSTOM_REMINDER, save_custom_reminder

    reminder_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_custom_reminder, pattern="^custom_reminder_")],  # –ò–°–ü–†–ê–í–ò–¢–¨
        states={
            SETTING_CUSTOM_REMINDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_custom_reminder)],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(reminder_conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("list", list_tasks))
    app.add_handler(CommandHandler("stop", stop_bot))

    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏—á–∞–º–∏
    app.add_handler(CommandHandler("add_feature", admin_add_feature))
    app.add_handler(CommandHandler("list_features", admin_list_features))
    app.add_handler(CommandHandler("deactivate_feature", admin_deactivate_feature))
    app.add_handler(CallbackQueryHandler(handle_donation_callback, pattern="donate|payment|cancel"))
    app.add_handler(CallbackQueryHandler(handle_feature_notification, pattern=r"^(try_feature_|feature_info_|close_notification)"))
    app.add_handler(CallbackQueryHandler(task_action))
    app.add_handler(conv_handler)
    app.add_handler(delete_conv_handler)
    app.add_handler(PreCheckoutQueryHandler(pre_checkout_donation_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_donation_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~menu_filter, add_task_from_text))
    app.add_handler(MessageHandler(menu_filter, main_menu_handler))
    app.add_handler(CommandHandler("test_notifications", test_feature_notifications))
    app.add_handler(CommandHandler("promote_feature", promote_test_feature))
    job_queue = app.job_queue
    job_queue.run_repeating(send_reminder_notification, interval=60, first=10)
    job_queue.run_repeating(send_feature_announcements, interval=3600, first=30)
    app.job_queue.run_once(setup_commands, 1)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ {DB_PATH}. –õ–æ–≥–∏ –≤ {logs_dir}")
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    app.add_error_handler(error_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
