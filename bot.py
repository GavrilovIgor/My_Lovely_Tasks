import os
import re
import sqlite3
from telegram import BotCommand, BotCommandScopeDefault
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters, ConversationHandler)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
DB_PATH = "tasks.db"
ADDING_TASK = 1
DELETING_TASKS = 2

import logging
import os

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ log-—Ñ–∞–π–ª—É –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
LOG_PATH = os.path.join(os.path.dirname(__file__), "bot.log")

logging.basicConfig(
    filename=LOG_PATH,
    filemode="a",
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –†–∞–±–æ—Ç–∞ —Å –ë–î ---

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            text TEXT,
            done INTEGER DEFAULT 0,
            priority INTEGER DEFAULT 0
        )
    """)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ priority
    c.execute("PRAGMA table_info(tasks)")
    columns = [column[1] for column in c.fetchall()]
    
    # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ priority –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
    if 'priority' not in columns:
        c.execute("ALTER TABLE tasks ADD COLUMN priority INTEGER DEFAULT 0")
        print("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ priority –≤ —Ç–∞–±–ª–∏—Ü—É tasks")
    
    conn.commit()
    conn.close()

def add_task_db(user_id, text, priority=0):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO tasks (user_id, text, done, priority) VALUES (?, ?, 0, ?)", (user_id, text, priority))
    conn.commit()
    conn.close()
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: user_id={user_id}, text='{text}'")

def update_task_priority(task_id, priority):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE tasks SET priority = ? WHERE id = ?", (priority, task_id))
    conn.commit()
    conn.close()

def get_tasks_db(user_id, only_open=False):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    if only_open:
        c.execute("SELECT id, text, done, priority FROM tasks WHERE user_id = ? AND done = 0 ORDER BY priority DESC, id", (user_id,))
    else:
        c.execute("SELECT id, text, done, priority FROM tasks WHERE user_id = ? ORDER BY priority DESC, id", (user_id,))
    tasks = c.fetchall()
    conn.close()
    return tasks

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"],
            ["üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"]
        ], 
        resize_keyboard=True
    )

# –í —Ñ—É–Ω–∫—Ü–∏–∏ toggle_task_db
def toggle_task_db(task_id, user_id):
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute(
            "UPDATE tasks SET done = NOT done WHERE id = ? AND user_id = ?",
            (task_id, user_id)
        )
        conn.commit()
        updated = c.rowcount > 0  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞
        conn.close()
        logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ id={task_id} (user_id={user_id})")
        return updated
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return False
    finally:
        if conn:
            conn.close()

def toggle_task_status_db(task_id, new_status=None):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    if new_status is not None:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        c.execute("UPDATE tasks SET done = ? WHERE id = ?", (new_status, task_id))
    else:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        c.execute("UPDATE tasks SET done = NOT done WHERE id = ?", (task_id,))
    
    conn.commit()
    conn.close()
    logger.info(f"–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ id={task_id}")

def delete_completed_tasks():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM tasks WHERE done = 1")
    conn.commit()
    conn.close()
    print("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã.")

def delete_completed_tasks_for_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM tasks WHERE user_id = ? AND done = 1", (user_id,))
    conn.commit()
    conn.close()

async def setup_commands(application):
    commands = [
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é"),
        BotCommand("list", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
        BotCommand("add", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
    ]
    
    await application.bot.set_my_commands(
        commands,
        scope=BotCommandScopeDefault()
    )
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
            return await add(update, context)
        elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ú–æ–∏ –∑–∞–¥–∞—á–∏' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
            await list_tasks(update, context)
            return ConversationHandler.END
        elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":  # –î–æ–±–∞–≤–ª–µ–Ω–æ!
            return await ask_delete_tasks(update, context)
        elif text == "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
            user_id = update.message.from_user.id
            delete_completed_tasks_for_user(user_id)
            await update.message.reply_text("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())
            await list_tasks(update, context)
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_menu_handler: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üò∫ –ü—Ä–∏–≤–µ—Ç, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫! –Ø ‚Äì —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–¥–∞—á!\n\n"
        "üìù –Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Ç–≤–æ—ë \"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ\" –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞–ª–æ—Å—å –≤ —Å–≤–∞–ª–∫—É —Å–ø–∏—Å–∫–æ–≤ –¥–µ–ª, –∞ –∂–∏–∑–Ω—å —Å—Ç–∞–ª–∞ –ø—Ä–æ—â–µ! \n\n"
        "‚ú® –ß—Ç–æ —è —É–º–µ—é:\n"
        "- –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å!)\n"
        "- –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (–ø—Ä–∏—è—Ç–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ, –∫–æ–≥–¥–∞ –≤—ã—á—ë—Ä–∫–∏–≤–∞–µ—à—å –¥–µ–ª–∞ ‚úÖ)\n"
        "- –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–µ (—á–∏—Å—Ç–æ—Ç–∞ ‚Äì –∑–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! üòä)\n\n"
        "üöÄ –ù–∞—á–Ω—ë–º –≤–º–µ—Å—Ç–µ –¥–µ–ª–∞—Ç—å —Ç–≤–æ–∏ –¥–µ–ª–∞? –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∑–∞–¥–∞—á—É!",
        reply_markup=get_main_keyboard()
    )

def delete_task_db(task_id, user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM tasks WHERE id = ? AND user_id = ?", (task_id, user_id))
    conn.commit()
    conn.close()
    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ id={task_id} –¥–ª—è user_id={user_id}")
    
# --- Telegram-–±–æ—Ç ---

def get_task_list_markup(user_id):
    tasks = get_tasks_db(user_id, only_open=False)
    keyboard = []

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(tasks)
    done_count = sum(1 for task in tasks if task[2])
    keyboard.append([
        InlineKeyboardButton(
            text=f"‚úÖ {done_count}/{total} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
            callback_data="toggle_all"
        )
    ])
    keyboard.append([
        InlineKeyboardButton(
            text="üîù –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            callback_data="priority_mode"
        )
    ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨", callback_data="divider")
    ])

    # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    priority_emoji = {
        3: "üî¥", # –í—ã—Å–æ–∫–∏–π
        2: "üü°", # –°—Ä–µ–¥–Ω–∏–π
        1: "üîµ"  # –ù–∏–∑–∫–∏–π
    }

    for task_id, text, done, priority in tasks:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        status = "‚úÖ" if done else "‚òê"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        task_text = f"{status} "
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ 0)
        if priority > 0:
            priority_icon = priority_emoji.get(priority, "")
            task_text += f"{priority_icon} "
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        task_text += text
        
        keyboard.append([
            InlineKeyboardButton(
                text=task_text,
                callback_data=f"toggle_{task_id}",
            )
        ])

    return InlineKeyboardMarkup(keyboard) if keyboard else None

async def show_priority_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    tasks = get_tasks_db(user_id, only_open=False)
    
    keyboard = []
    keyboard.append([
        InlineKeyboardButton(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:",
            callback_data="divider"
        )
    ])
    
    for i, (task_id, text, done, priority) in enumerate(tasks, 1):
        # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        short_text = text[:30] + "..." if len(text) > 30 else text
        task_text = f"{i}. {short_text}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=task_text,
                callback_data=f"set_priority_{task_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_list"
        )
    ])
    
    await query.edit_message_text(
        text="üîÑ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_priority_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(query.data.split('_')[2])
    
    keyboard = [
        [
            InlineKeyboardButton(
                text="üî¥ –í—ã—Å–æ–∫–∏–π",
                callback_data=f"priority_{task_id}_3"
            )
        ],
        [
            InlineKeyboardButton(
                text="üü° –°—Ä–µ–¥–Ω–∏–π",
                callback_data=f"priority_{task_id}_2"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîµ –ù–∏–∑–∫–∏–π",
                callback_data=f"priority_{task_id}_1"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data="priority_mode"
            )
        ]
    ]
    
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def set_task_priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ callback_data
    parts = query.data.split('_')
    task_id = int(parts[1])
    priority = int(parts[2])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_task_priority(task_id, priority)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    await show_priority_menu(update, context)

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–æ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–¥–∞—á–∞ 1\n–ó–∞–¥–∞—á–∞ 2\n –∏–ª–∏\n–ó–∞–¥–∞—á–∞ 1; –ó–∞–¥–∞—á–∞ 2)")
    return ADDING_TASK

async def save_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    input_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if input_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∫ –∑–∞–¥–∞—á–∏
    menu_buttons = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]
    
    if not input_text:
        await update.message.reply_text("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if input_text in menu_buttons:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await main_menu_handler(update, context)
        return ConversationHandler.END
    
    tasks_list = [task.strip() for task in re.split(r';|\n', input_text) if task.strip()]
    added_count = 0
    
    for task_text in tasks_list:
        add_task_db(user_id, task_text)
    
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    await list_tasks(update, context)
    
    return ConversationHandler.END

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = get_tasks_db(user_id, only_open=False)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–µ
    keyboard_markup = get_task_list_markup(user_id)
    
    if not tasks:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á üôÇ")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á üôÇ")
        return

    try:
        if update.callback_query:
            # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
            await update.callback_query.edit_message_text(
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                reply_markup=keyboard_markup
            )
        else:
            # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await update.message.reply_text(
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                reply_markup=keyboard_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",
                reply_markup=keyboard_markup
            )
        except Exception as e2:
            logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {e2}")
            if update.message:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def toggle_all_tasks_db(user_id, set_done: bool):
    conn = None
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ bool –≤ int
        c.execute("UPDATE tasks SET done = ? WHERE user_id = ?", (int(set_done), user_id))
        conn.commit()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {c.rowcount} –∑–∞–¥–∞—á")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

async def task_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    
    if data == "divider":
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        await query.answer()
        return
    
    if data == "toggle_all":
        tasks = get_tasks_db(user_id, only_open=False)
        if not tasks:
            await query.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        has_incomplete = any(not task[2] for task in tasks)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        # –ò–Ω–∞—á–µ —Å–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫–∏ —Å–æ –≤—Å–µ—Ö
        new_status = 1 if has_incomplete else 0
        
        for task_id, _, _, _ in tasks:  # –î–æ–±–∞–≤–ª–µ–Ω –µ—â–µ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è priority
            toggle_task_status_db(task_id, new_status)
        
        await query.answer("–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑–º–µ–Ω–µ–Ω")
        await list_tasks(update, context)
        return
    
    if data == "priority_mode":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        await show_priority_menu(update, context)
        return
    
    if data.startswith("set_priority_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        await show_priority_options(update, context)
        return
    
    if data.startswith("priority_"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
        await set_task_priority(update, context)
        return
    
    if data == "back_to_list":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await list_tasks(update, context)
        return
    
    if data.startswith("toggle_"):
        task_id = int(data.split("_")[1])
        toggle_task_status_db(task_id)
        await query.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω")
        await list_tasks(update, context)
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ callback_data
    await query.answer()


async def ask_delete_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = ReplyKeyboardMarkup(
        [["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5-7):",
        reply_markup=cancel_keyboard
    )
    return DELETING_TASKS

async def add_task_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∫ –∑–∞–¥–∞—á–∏
    menu_buttons = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]
    
    if not text or text.startswith('/'):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if text in menu_buttons:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ ; –∏–ª–∏ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É —Å—Ç—Ä–æ–∫–∏
    tasks_list = [task.strip() for task in re.split(r';|\n', text) if task.strip()]
    for task_text in tasks_list:
        add_task_db(user_id, task_text)
    
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: user_id={user_id}, tasks={tasks_list}")
    
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    await list_tasks(update, context)

import re

async def ask_add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = ReplyKeyboardMarkup(
        [["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:",
        reply_markup=cancel_keyboard
    )
    return ADDING_TASK

async def delete_tasks_by_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    input_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if input_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á
    menu_buttons = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]
    
    if input_text in menu_buttons:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await main_menu_handler(update, context)
        return ConversationHandler.END
    
    input_text = input_text.replace(' ', '')
    tasks = get_tasks_db(user_id, only_open=False)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
    to_delete = set()

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
    for part in input_text.split(','):
        if '-' in part:
            # –î–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä 2-5
            try:
                start, end = map(int, part.split('-'))
                for n in range(start, end + 1):
                    if 1 <= n <= len(tasks):
                        to_delete.add(tasks[n-1][0])  # task_id
            except Exception:
                continue
        else:
            # –û–¥–∏–Ω–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä
            if part.isdigit():
                n = int(part)
                if 1 <= n <= len(tasks):
                    to_delete.add(tasks[n-1][0])  # task_id

    if not to_delete:
        await update.message.reply_text(
            "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    for task_id in to_delete:
        delete_task_db(task_id, user_id)

    await update.message.reply_text("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())
    await list_tasks(update, context)
    return ConversationHandler.END

menu_filter = (
    filters.Regex(r"^üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏$") |
    filters.Regex(r"^üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ$")
) & ~filters.COMMAND

def main():
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram-–±–æ—Ç–∞
    app = ApplicationBuilder().token(TOKEN).build()

    # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler("add", add)
    ],
    states={
        ADDING_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_task)]
    },
    fallbacks=[]
)
    # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_tasks))
    app.add_handler(CallbackQueryHandler(task_action))
    app.add_handler(MessageHandler(menu_filter, main_menu_handler))
    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~menu_filter,
        add_task_from_text
    ))

    # 6. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ tasks.db.")
    app.run_polling()

if __name__ == "__main__":
    main()