import os
import re
import sqlite3
from datetime import datetime, timedelta, date
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler, CallbackContext
from telegram import BotCommand, BotCommandScopeDefault
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
DB_PATH = "data/tasks.db"
os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
ADDING_TASK = 1
DELETING_TASKS = 2

import logging
import os

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ log-—Ñ–∞–π–ª—É –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
LOG_PATH = os.path.join(os.path.dirname(__file__), "bot.log")

logging.basicConfig(
    filename=LOG_PATH,
    filemode="a",
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –†–∞–±–æ—Ç–∞ —Å –ë–î ---

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            text TEXT,
            done INTEGER DEFAULT 0,
            priority INTEGER DEFAULT 0,
            reminder_time TIMESTAMP DEFAULT NULL
        )
    """)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ priority
    c.execute("PRAGMA table_info(tasks)")
    columns = [column[1] for column in c.fetchall()]
    
    # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ priority –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
    if 'priority' not in columns:
        c.execute("ALTER TABLE tasks ADD COLUMN priority INTEGER DEFAULT 0")
        print("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ priority –≤ —Ç–∞–±–ª–∏—Ü—É tasks")
    
    # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ reminder_time –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
    if 'reminder_time' not in columns:
        c.execute("ALTER TABLE tasks ADD COLUMN reminder_time TIMESTAMP DEFAULT NULL")
        print("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ reminder_time –≤ —Ç–∞–±–ª–∏—Ü—É tasks")
    
    conn.commit()
    conn.close()

def add_task_db(user_id, text, priority=0):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    reminder_time, clean_text = extract_reminder_time(text)
    
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    if reminder_time:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        reminder_str = reminder_time.strftime('%Y-%m-%d %H:%M:%S')
        c.execute("""
            INSERT INTO tasks (user_id, text, done, priority, reminder_time) 
            VALUES (?, ?, 0, ?, ?)
        """, (user_id, clean_text, priority, reminder_str))
        task_id = c.lastrowid
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º: id={task_id}, user_id={user_id}, text='{clean_text}', reminder={reminder_str}")
    else:
        # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –Ω–µ–≥–æ
        c.execute("""
            INSERT INTO tasks (user_id, text, done, priority) 
            VALUES (?, ?, 0, ?)
        """, (user_id, text, priority))
        task_id = c.lastrowid
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: id={task_id}, user_id={user_id}, text='{text}'")
    
    conn.commit()
    conn.close()
    return task_id

def update_task_priority(task_id, priority):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE tasks SET priority = ? WHERE id = ?", (priority, task_id))
    conn.commit()
    conn.close()

def get_tasks_db(user_id, only_open=False):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    if only_open:
        c.execute("""
            SELECT id, text, done, priority, reminder_time 
            FROM tasks 
            WHERE user_id = ? AND done = 0 
            ORDER BY priority DESC, id
        """, (user_id,))
    else:
        c.execute("""
            SELECT id, text, done, priority, reminder_time 
            FROM tasks 
            WHERE user_id = ? 
            ORDER BY priority DESC, id
        """, (user_id,))
    tasks = c.fetchall()
    conn.close()
    return tasks

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"],
            ["üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"]
        ], 
        resize_keyboard=True
    )

# –í —Ñ—É–Ω–∫—Ü–∏–∏ toggle_task_db
def toggle_task_db(task_id, user_id):
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute(
            "UPDATE tasks SET done = NOT done WHERE id = ? AND user_id = ?",
            (task_id, user_id)
        )
        conn.commit()
        updated = c.rowcount > 0  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞
        conn.close()
        logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ id={task_id} (user_id={user_id})")
        return updated
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return False
    finally:
        if conn:
            conn.close()

def extract_reminder_time(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: '{text}'")
    
    # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @–ß–ß:–ú–ú
    match = re.search(r'@(\d{1,2}):(\d{2})', text)
    if not match:
        logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None, text
    
    hour = int(match.group(1))
    minute = int(match.group(2))
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: {hour}:{minute}")
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    clean_text = re.sub(r'@\d{1,2}:\d{2}', '', text).strip()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    now = datetime.now()
    reminder_time = datetime(now.year, now.month, now.day, hour, minute)
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if reminder_time < now:
        reminder_time = reminder_time + timedelta(days=1)
    
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞: {reminder_time}")
    return reminder_time, clean_text

def set_reminder(task_id, reminder_time):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE tasks SET reminder_time = ? WHERE id = ?", 
              (reminder_time.strftime('%Y-%m-%d %H:%M:%S') if reminder_time else None, task_id))
    conn.commit()
    conn.close()
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ id={task_id} –Ω–∞ {reminder_time}")

def get_tasks_with_reminders(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        SELECT id, text, done, priority, reminder_time 
        FROM tasks 
        WHERE user_id = ? AND reminder_time IS NOT NULL
        ORDER BY reminder_time
    """, (user_id,))
    tasks = c.fetchall()
    conn.close()
    return tasks

def check_due_reminders():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    c.execute("SELECT id, user_id, text, reminder_time FROM tasks WHERE reminder_time IS NOT NULL")
    all_reminders = c.fetchall()
    logger.info(f"–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ: {all_reminders}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ
    c.execute("""
        SELECT id, user_id, text, done, reminder_time 
        FROM tasks 
        WHERE reminder_time IS NOT NULL AND reminder_time <= ? AND done = 0
    """, (now,))
    due_tasks = c.fetchall()
    conn.close()
    
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ {now}: –Ω–∞–π–¥–µ–Ω–æ {len(due_tasks)} –∑–∞–¥–∞—á")
    if due_tasks:
        logger.info(f"–ó–∞–¥–∞—á–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º: {due_tasks}")
    return due_tasks

def toggle_task_status_db(task_id, new_status=None):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    if new_status is not None:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        c.execute("UPDATE tasks SET done = ? WHERE id = ?", (new_status, task_id))
    else:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        c.execute("UPDATE tasks SET done = NOT done WHERE id = ?", (task_id,))
    
    conn.commit()
    conn.close()
    logger.info(f"–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ id={task_id}")

def delete_completed_tasks():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM tasks WHERE done = 1")
    conn.commit()
    conn.close()
    print("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã.")

def delete_completed_tasks_for_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM tasks WHERE user_id = ? AND done = 1", (user_id,))
    conn.commit()
    conn.close()

async def setup_commands(application):
    commands = [
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é"),
        BotCommand("list", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
        BotCommand("add", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
    ]
    
    await application.bot.set_my_commands(
        commands,
        scope=BotCommandScopeDefault()
    )
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
            return await add(update, context)
        elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ú–æ–∏ –∑–∞–¥–∞—á–∏' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
            await list_tasks(update, context)
            return ConversationHandler.END
        elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":  # –î–æ–±–∞–≤–ª–µ–Ω–æ!
            return await ask_delete_tasks(update, context)
        elif text == "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
            user_id = update.message.from_user.id
            delete_completed_tasks_for_user(user_id)
            await update.message.reply_text("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())
            await list_tasks(update, context)
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_menu_handler: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üò∫ –ü—Ä–∏–≤–µ—Ç, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫! –Ø ‚Äì —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–¥–∞—á!\n\n"
        "üìù –Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Ç–≤–æ—ë \"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ\" –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞–ª–æ—Å—å –≤ —Å–≤–∞–ª–∫—É —Å–ø–∏—Å–∫–æ–≤ –¥–µ–ª, –∞ –∂–∏–∑–Ω—å —Å—Ç–∞–ª–∞ –ø—Ä–æ—â–µ! \n\n"
        "‚ú® –ß—Ç–æ —è —É–º–µ—é:\n"
        "- –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å!)\n"
        "- –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (–ø—Ä–∏—è—Ç–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ, –∫–æ–≥–¥–∞ –≤—ã—á—ë—Ä–∫–∏–≤–∞–µ—à—å –¥–µ–ª–∞ ‚úÖ)\n"
        "- –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–µ (—á–∏—Å—Ç–æ—Ç–∞ ‚Äì –∑–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! üòä)\n\n"
        "üöÄ –ù–∞—á–Ω—ë–º –≤–º–µ—Å—Ç–µ –¥–µ–ª–∞—Ç—å —Ç–≤–æ–∏ –¥–µ–ª–∞? –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∑–∞–¥–∞—á—É!",
        reply_markup=get_main_keyboard()
    )

def delete_task_db(task_id, user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM tasks WHERE id = ? AND user_id = ?", (task_id, user_id))
    conn.commit()
    conn.close()
    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ id={task_id} –¥–ª—è user_id={user_id}")
    
# --- Telegram-–±–æ—Ç ---

def get_task_list_markup(user_id):
    tasks = get_tasks_db(user_id, only_open=False)
    keyboard = []

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    total = len(tasks)
    done_count = sum(1 for task in tasks if task[2])
    keyboard.append([
        InlineKeyboardButton(
            text=f"üîÑ [ {done_count}/{total} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ]",
            callback_data="toggle_all"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    keyboard.append([
        InlineKeyboardButton(
            text=f"üî¢ [ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ]",
            callback_data="priority_mode"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard.append([
        InlineKeyboardButton(
            text=f"#Ô∏è‚É£ [ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ]",
            callback_data="category_mode"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    keyboard.append([
        InlineKeyboardButton(
            text=f"üÜô [ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ]",
            callback_data="reminder_mode"
        )
    ])
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    keyboard.append([
        InlineKeyboardButton(text="‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ", callback_data="divider")
    ])

    # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    priority_emoji = {
        3: "üî¥", # –í—ã—Å–æ–∫–∏–π
        2: "üü°", # –°—Ä–µ–¥–Ω–∏–π
        1: "üîµ"  # –ù–∏–∑–∫–∏–π
    }

    for task_id, text, done, priority, reminder_time in tasks:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        status = "‚úÖ" if done else "‚òê"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        task_text = f"{status} "
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ 0)
        if priority > 0:
            priority_icon = priority_emoji.get(priority, "")
            task_text += f"{priority_icon} "
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if reminder_time:
            task_text += f"üîî "
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        task_text += text
        
        keyboard.append([
            InlineKeyboardButton(
                text=task_text,
                callback_data=f"toggle_{task_id}",
            )
        ])

    return InlineKeyboardMarkup(keyboard) if keyboard else None

async def show_reminders_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    tasks_with_reminders = get_tasks_with_reminders(user_id)
    
    keyboard = []
    keyboard.append([
        InlineKeyboardButton(
            text="–ó–∞–¥–∞—á–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:",
            callback_data="divider"
        )
    ])
    
    if not tasks_with_reminders:
        keyboard.append([
            InlineKeyboardButton(
                text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏",
                callback_data="divider"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤—å—Ç–µ @–≤—Ä–µ–º—è –∫ –∑–∞–¥–∞—á–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                callback_data="divider"
            )
        ])
    else:
        # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        priority_emoji = {
            3: "üî¥", # –í—ã—Å–æ–∫–∏–π
            2: "üü°", # –°—Ä–µ–¥–Ω–∏–π
            1: "üîµ"  # –ù–∏–∑–∫–∏–π
        }
        
        for task_id, text, done, priority, reminder_time in tasks_with_reminders:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
            if reminder_time:
                reminder_dt = datetime.strptime(reminder_time, '%Y-%m-%d %H:%M:%S')
                reminder_str = reminder_dt.strftime('%d.%m %H:%M')
            else:
                reminder_str = "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            status = "‚úÖ" if done else "‚òê"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            priority_icon = ""
            if priority > 0:
                priority_icon = f"{priority_emoji.get(priority, '')} "
            
            task_text = f"{status} {priority_icon}[{reminder_str}] {text}"
            
            keyboard.append([
                InlineKeyboardButton(
                    text=task_text,
                    callback_data=f"reminder_options_{task_id}"
                )
            ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á",
            callback_data="back_to_list"
        )
    ])
    
    await query.edit_message_text(
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_reminder_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(query.data.split('_')[2])
    
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                callback_data=f"delete_reminder_{task_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 30 –º–∏–Ω—É—Ç",
                callback_data=f"snooze_reminder_{task_id}_30"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å",
                callback_data=f"snooze_reminder_{task_id}_60"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
                callback_data=f"snooze_reminder_{task_id}_tomorrow"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º",
                callback_data="reminder_mode"
            )
        ]
    ]
    
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def delete_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(query.data.split('_')[2])
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NULL)
    set_reminder(task_id, None)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await show_reminders_menu(update, context)

async def snooze_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏ –≤—Ä–µ–º—è –æ—Ç—Å—Ä–æ—á–∫–∏ –∏–∑ callback_data
    parts = query.data.split('_')
    task_id = int(parts[2])
    snooze_value = parts[3]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT reminder_time FROM tasks WHERE id = ?", (task_id,))
    result = c.fetchone()
    conn.close()
    
    if result and result[0]:
        current_reminder = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if snooze_value == "tomorrow":
            # –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Ç–æ –∂–µ –≤—Ä–µ–º—è)
            new_reminder = current_reminder + timedelta(days=1)
        else:
            # –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ—Ç –¢–ï–ö–£–©–ï–ì–û –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            minutes = int(snooze_value)
            new_reminder = current_reminder + timedelta(minutes=minutes)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        set_reminder(task_id, new_reminder)
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ —Å {current_reminder} –Ω–∞ {new_reminder}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await show_reminders_menu(update, context)

async def send_reminder_notification(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    due_tasks = check_due_reminders()
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: –Ω–∞–π–¥–µ–Ω–æ {len(due_tasks)} –∑–∞–¥–∞—á")
    
    if len(due_tasks) > 0:
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {due_tasks}")
    
    for task_id, user_id, text, done, reminder_time in due_tasks:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                    callback_data=f"toggle_{task_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 30 –º–∏–Ω",
                    callback_data=f"snooze_reminder_{task_id}_30"
                )
            ]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞–¥–∞—á–µ {task_id}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–æ—Å—å
            set_reminder(task_id, None)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def extract_categories(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö—ç—à—Ç–µ–≥–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏) –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
    hashtags = re.findall(r'#(\w+)', text)
    return hashtags

async def show_categories_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    tasks = get_tasks_db(user_id, only_open=False)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∑–∞–¥–∞—á
    categories = {}
    for task_id, text, done, priority, reminder_time in tasks:
        task_categories = extract_categories(text)
        for category in task_categories:
            if category in categories:
                categories[category] += 1
            else:
                categories[category] = 1
    
    keyboard = []
    
    if not categories:
        keyboard.append([
            InlineKeyboardButton(
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                callback_data="divider"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text="–ù–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ #",
                callback_data="divider"
            )
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                callback_data="divider"
            )
        ])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á
        sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)
        
        for category, count in sorted_categories:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"#{category} ({count})",
                    callback_data=f"filter_category_{category}"
                )
            ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –í—Å–µ –∑–∞–¥–∞—á–∏",
            callback_data="back_to_list"
        )
    ])
    
    await query.edit_message_text(
        text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
async def show_tasks_by_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data –∏–ª–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if hasattr(query, 'data') and query.data.startswith("filter_category_"):
        category = query.data.split('_')[2]
    elif 'current_view' in context.user_data and context.user_data['current_view']['type'] == 'category':
        category = context.user_data['current_view']['category']
    else:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await show_categories_menu(update, context)
        return
    
    user_id = query.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    context.user_data['current_view'] = {
        'type': 'category',
        'category': category
    }
    
    tasks = get_tasks_db(user_id, only_open=False)
    
    keyboard = []
    
    keyboard.append([
        InlineKeyboardButton(
            text=f"–ó–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{category}:",
            callback_data="divider"
        )
    ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ", callback_data="divider")
    ])
    
    # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    priority_emoji = {
        3: "üî¥", # –í—ã—Å–æ–∫–∏–π
        2: "üü°", # –°—Ä–µ–¥–Ω–∏–π
        1: "üîµ"  # –ù–∏–∑–∫–∏–π
    }
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    found = False
    for task_id, text, done, priority, reminder_time in tasks:
        if f"#{category}" in text:
            found = True
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            status = "‚úÖ" if done else "‚òê"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            task_text = f"{status} "
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ 0)
            if priority > 0:
                priority_icon = priority_emoji.get(priority, "")
                task_text += f"{priority_icon} "
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            task_text += text
            
            keyboard.append([
                InlineKeyboardButton(
                    text=task_text,
                    callback_data=f"toggle_{task_id}",
                )
            ])
    
    if not found:
        keyboard.append([
            InlineKeyboardButton(
                text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–¥–∞—á",
                callback_data="divider"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            callback_data="category_mode"
        )
    ])
    
    await query.edit_message_text(
        text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è #{category}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_priority_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    tasks = get_tasks_db(user_id, only_open=False)
    
    keyboard = []
    keyboard.append([
        InlineKeyboardButton(
            text="–ö–∞–∫–æ–π –∑–∞–¥–∞—á–µ –∑–∞–¥–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç?",
            callback_data="divider"
        )
    ])
    
    # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    priority_emoji = {
        3: "üî¥", # –í—ã—Å–æ–∫–∏–π
        2: "üü°", # –°—Ä–µ–¥–Ω–∏–π
        1: "üîµ"  # –ù–∏–∑–∫–∏–π
    }
    
    for i, (task_id, text, done, priority, reminder_time) in enumerate(tasks, 1):
        # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        short_text = text[:30] + "..." if len(text) > 30 else text
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        priority_icon = ""
        if priority > 0:
            priority_icon = f"{priority_emoji.get(priority, '')} "
        
        task_text = f"{i}. {priority_icon}{short_text}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=task_text,
                callback_data=f"set_priority_{task_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_list"
        )
    ])
    
    await query.edit_message_text(
        text="üîÑ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_priority_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(query.data.split('_')[2])
    
    keyboard = [
        [
            InlineKeyboardButton(
                text="üî¥ –í—ã—Å–æ–∫–∏–π",
                callback_data=f"priority_{task_id}_3"
            )
        ],
        [
            InlineKeyboardButton(
                text="üü° –°—Ä–µ–¥–Ω–∏–π",
                callback_data=f"priority_{task_id}_2"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîµ –ù–∏–∑–∫–∏–π",
                callback_data=f"priority_{task_id}_1"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data="priority_mode"
            )
        ]
    ]
    
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def set_task_priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ callback_data
    parts = query.data.split('_')
    task_id = int(parts[1])
    priority = int(parts[2])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_task_priority(task_id, priority)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    await show_priority_menu(update, context)

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–æ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–¥–∞—á–∞ 1\n–ó–∞–¥–∞—á–∞ 2\n –∏–ª–∏\n–ó–∞–¥–∞—á–∞ 1; –ó–∞–¥–∞—á–∞ 2)")
    return ADDING_TASK

async def save_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    input_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if input_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∫ –∑–∞–¥–∞—á–∏
    menu_buttons = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]
    
    if not input_text:
        await update.message.reply_text("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if input_text in menu_buttons:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await main_menu_handler(update, context)
        return ConversationHandler.END
    
    tasks_list = [task.strip() for task in re.split(r';|\n', input_text) if task.strip()]
    added_count = 0
    
    for task_text in tasks_list:
        add_task_db(user_id, task_text)
    
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    await list_tasks(update, context)
    
    return ConversationHandler.END

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = get_tasks_db(user_id, only_open=False)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–µ
    keyboard_markup = get_task_list_markup(user_id)
    
    if not tasks:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á üôÇ")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á üôÇ")
        return

    try:
        if update.callback_query:
            # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
            await update.callback_query.edit_message_text(
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                reply_markup=keyboard_markup
            )
        else:
            # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await update.message.reply_text(
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                reply_markup=keyboard_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text="–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",
                reply_markup=keyboard_markup
            )
        except Exception as e2:
            logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {e2}")
            if update.message:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def toggle_all_tasks_db(user_id, set_done: bool):
    conn = None
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ bool –≤ int
        c.execute("UPDATE tasks SET done = ? WHERE user_id = ?", (int(set_done), user_id))
        conn.commit()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {c.rowcount} –∑–∞–¥–∞—á")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

async def task_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    
    if data == "divider":
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        await query.answer()
        return
    
    if data == "toggle_all":
        tasks = get_tasks_db(user_id, only_open=False)
        if not tasks:
            await query.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        has_incomplete = any(not task[2] for task in tasks)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        # –ò–Ω–∞—á–µ —Å–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫–∏ —Å–æ –≤—Å–µ—Ö
        new_status = 1 if has_incomplete else 0
        
        for task_id, _, _, _, _ in tasks:
            toggle_task_status_db(task_id, new_status)
        
        await query.answer("–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑–º–µ–Ω–µ–Ω")
        await list_tasks(update, context)
        return
    
    if data == "priority_mode":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        await show_priority_menu(update, context)
        return
    
    if data == "category_mode":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await show_categories_menu(update, context)
        return
    
    if data == "reminder_mode":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        await show_reminders_menu(update, context)
        return
    
    if data.startswith("reminder_options_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await show_reminder_options(update, context)
        return
    
    if data.startswith("delete_reminder_"):
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await delete_reminder(update, context)
        return
    
    if data.startswith("snooze_reminder_"):
        # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await snooze_reminder(update, context)
        return
    
    if data.startswith("filter_category_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await show_tasks_by_category(update, context)
        return
    
    if data.startswith("set_priority_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        await show_priority_options(update, context)
        return
    
    if data.startswith("priority_"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
        await set_task_priority(update, context)
        return
    
    if data == "back_to_list":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await list_tasks(update, context)
        return
    
    if data.startswith("toggle_"):
        task_id = int(data.split("_")[1])
        toggle_task_status_db(task_id)
    await query.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if hasattr(context, 'user_data') and 'current_view' in context.user_data and context.user_data['current_view']['type'] == 'category':
        category = context.user_data['current_view']['category']
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await show_tasks_by_category(update, context)
    else:
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        await list_tasks(update, context)
    return

async def ask_delete_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = ReplyKeyboardMarkup(
        [["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5-7):",
        reply_markup=cancel_keyboard
    )
    return DELETING_TASKS

async def add_task_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∫ –∑–∞–¥–∞—á–∏
    menu_buttons = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]
    
    if not text or text.startswith('/'):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if text in menu_buttons:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ ; –∏–ª–∏ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É —Å—Ç—Ä–æ–∫–∏
    tasks_list = [task.strip() for task in re.split(r';|\n', text) if task.strip()]
    for task_text in tasks_list:
        add_task_db(user_id, task_text)
    
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: user_id={user_id}, tasks={tasks_list}")
    
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    await list_tasks(update, context)

import re

async def ask_add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = ReplyKeyboardMarkup(
        [["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:",
        reply_markup=cancel_keyboard
    )
    return ADDING_TASK

async def delete_tasks_by_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    input_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if input_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á
    menu_buttons = ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]
    
    if input_text in menu_buttons:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await main_menu_handler(update, context)
        return ConversationHandler.END
    
    input_text = input_text.replace(' ', '')
    tasks = get_tasks_db(user_id, only_open=False)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
    to_delete = set()

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
    for part in input_text.split(','):
        if '-' in part:
            # –î–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä 2-5
            try:
                start, end = map(int, part.split('-'))
                for n in range(start, end + 1):
                    if 1 <= n <= len(tasks):
                        to_delete.add(tasks[n-1][0])  # task_id
            except Exception:
                continue
        else:
            # –û–¥–∏–Ω–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä
            if part.isdigit():
                n = int(part)
                if 1 <= n <= len(tasks):
                    to_delete.add(tasks[n-1][0])  # task_id

    if not to_delete:
        await update.message.reply_text(
            "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    for task_id in to_delete:
        delete_task_db(task_id, user_id)

    await update.message.reply_text("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())
    await list_tasks(update, context)
    return ConversationHandler.END

menu_filter = (
    filters.Regex(r"^üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏$") |
    filters.Regex(r"^üßπ –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ$")
) & ~filters.COMMAND

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help"""
    await update.message.reply_text(
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ù–∞—á–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë —Ç–µ–∫—Å—Ç.\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∑–≤–æ–Ω–∏—Ç—å @18:00)\n"
        "–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ #–∫–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ #–ø–æ–∫—É–ø–∫–∏)"
    )

async def test_notification(context):
    """–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    try:
        admin_id = context.bot_data.get("admin_id", context.bot.id)
        await context.bot.send_message(
            chat_id=admin_id,
            text="üîî –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        )
        logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def main():
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    app = Application.builder().token(TOKEN).build()
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("add", add)
        ],
        states={
            ADDING_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_task)]
        },
        fallbacks=[]
    )
    
    # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("list", list_tasks))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á
    app.add_handler(CallbackQueryHandler(task_action))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    app.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~menu_filter, add_task_from_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    app.add_handler(MessageHandler(menu_filter, main_menu_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue = app.job_queue
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    job_queue.run_once(test_notification, 10)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
    job_queue.run_repeating(send_reminder_notification, interval=30, first=5)
    
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

    # 5. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ tasks.db.")
    app.run_polling()
if __name__ == "__main__":
    main()